2025-01-03 21:37:12,507 - __main__ - INFO - Program started
2025-01-03 21:37:12,507 - src.data_loader - DEBUG - DataLoader initialized with data_dir: data
2025-01-03 21:37:12,507 - src.openai_client - DEBUG - OpenAIClient initialized with model_name: gpt-4o-mini
2025-01-03 21:37:12,507 - src.processor - DEBUG - Processor initialized
2025-01-03 21:37:12,507 - src.visualizer - DEBUG - Visualizer initialized with output_dir: output
2025-01-03 21:37:12,507 - src.processor - INFO - Starting processing of exam '2023_1형'
2025-01-03 21:37:12,508 - src.data_loader - DEBUG - Loaded question ID: Q1 from 1.json
2025-01-03 21:37:12,508 - src.data_loader - DEBUG - Loaded question ID: Q2 from 2.json
2025-01-03 21:37:12,508 - src.data_loader - DEBUG - Loaded question ID: Q3 from 3.json
2025-01-03 21:37:12,508 - src.data_loader - DEBUG - Loaded question ID: Q4 from 4.json
2025-01-03 21:37:12,508 - src.data_loader - DEBUG - Loaded question ID: Q5 from 5.json
2025-01-03 21:37:12,508 - src.data_loader - DEBUG - Loaded question ID: Q6 from 6.json
2025-01-03 21:37:12,508 - src.data_loader - DEBUG - Loaded question ID: Q7 from 7.json
2025-01-03 21:37:12,509 - src.data_loader - DEBUG - Loaded question ID: Q8 from 8.json
2025-01-03 21:37:12,509 - src.data_loader - DEBUG - Loaded question ID: Q9 from 9.json
2025-01-03 21:37:12,509 - src.data_loader - DEBUG - Loaded question ID: Q10 from 10.json
2025-01-03 21:37:12,509 - src.data_loader - INFO - Loaded 10 questions from 2023_1형
2025-01-03 21:37:12,509 - src.processor - INFO - Processing 10 questions for exam '2023_1형'
2025-01-03 21:37:12,519 - src.processor - INFO - Processing question 1/10 (ID: Q1)
2025-01-03 21:37:12,519 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:37:12,519 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: 아래 문제들에서 특별한 언급이 없는 한 기업의 보고기간(회계기간)은
매년 1월 1일부터 12월 31일까지이다. 자료에서 제시한 것 외의
사항은 고려하지 않고 답한다. 예를 들어, 법인세에 대한 언급이
없으면 법인세효과는 고려하지 않는다. 또한 기업은 주권상장법인으로
계속해서 한국채택국제회계기준(K-IFRS)을 적용해오고 있다고
가정하고 보기 중에서 물음에 가장 합당한 답을 고르시오.재무보고를 위한 개념체계’에 대한 다음 설명 중 옳지 않은 것은?

Options:
1. 1. 보고기업이 지배-종속관계로 모두 연결되어 있지는 않은 둘 이상
실체들로 구성된다면 그 보고기업의 재무제표를 ‘비연결재무제표’
라고 부른다.
2. 2. 일반목적재무보고서의 대상이 되는 주요이용자는 필요한 재무
정보의 많은 부분을 일반목적재무제표에 의존해야 하는 현재
및 잠재적 투자자, 대여자와 그 밖의 채권자를 말한다.
3. 3. 만일 어떤 두 가지 방법이 모두 현상에 대하여 동일하게 목적
적합한 정보이고 동일하게 충실한 표현을 제공하는 것이라면,
보강적 질적특성은 이 두 가지 방법 가운데 어느 방법을 그 현상의
서술에 사용해야 할지를 결정하는 데 도움을 줄 수 있다.
4. 4. 일반적으로 재무제표는 계속기업가정 하에 작성되나, 기업이
청산을 하거나 거래를 중단하려는 의도가 있다면 계속기업과는
다른 기준에 따라 작성되어야 하고 사용한 기준을 재무제표에
기술한다
5. 5. 일반목적재무보고의 목적을 달성하기 위해 회계기준위원회는
‘개념체계’의 관점에서 벗어난 요구사항을 정하는 경우가 있을
수 있다.

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:37:12,533 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:37:12,534 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\uc544\\ub798 \\ubb38\\uc81c\\ub4e4\\uc5d0\\uc11c \\ud2b9\\ubcc4\\ud55c \\uc5b8\\uae09\\uc774 \\uc5c6\\ub294 \\ud55c \\uae30\\uc5c5\\uc758 \\ubcf4\\uace0\\uae30\\uac04(\\ud68c\\uacc4\\uae30\\uac04)\\uc740\\n\\ub9e4\\ub144 1\\uc6d4 1\\uc77c\\ubd80\\ud130 12\\uc6d4 31\\uc77c\\uae4c\\uc9c0\\uc774\\ub2e4. \\uc790\\ub8cc\\uc5d0\\uc11c \\uc81c\\uc2dc\\ud55c \\uac83 \\uc678\\uc758\\n\\uc0ac\\ud56d\\uc740 \\uace0\\ub824\\ud558\\uc9c0 \\uc54a\\uace0 \\ub2f5\\ud55c\\ub2e4. \\uc608\\ub97c \\ub4e4\\uc5b4, \\ubc95\\uc778\\uc138\\uc5d0 \\ub300\\ud55c \\uc5b8\\uae09\\uc774\\n\\uc5c6\\uc73c\\uba74 \\ubc95\\uc778\\uc138\\ud6a8\\uacfc\\ub294 \\uace0\\ub824\\ud558\\uc9c0 \\uc54a\\ub294\\ub2e4. \\ub610\\ud55c \\uae30\\uc5c5\\uc740 \\uc8fc\\uad8c\\uc0c1\\uc7a5\\ubc95\\uc778\\uc73c\\ub85c\\n\\uacc4\\uc18d\\ud574\\uc11c \\ud55c\\uad6d\\ucc44\\ud0dd\\uad6d\\uc81c\\ud68c\\uacc4\\uae30\\uc900(K-IFRS)\\uc744 \\uc801\\uc6a9\\ud574\\uc624\\uace0 \\uc788\\ub2e4\\uace0\\n\\uac00\\uc815\\ud558\\uace0 \\ubcf4\\uae30 \\uc911\\uc5d0\\uc11c \\ubb3c\\uc74c\\uc5d0 \\uac00\\uc7a5 \\ud569\\ub2f9\\ud55c \\ub2f5\\uc744 \\uace0\\ub974\\uc2dc\\uc624.\\uc7ac\\ubb34\\ubcf4\\uace0\\ub97c \\uc704\\ud55c \\uac1c\\ub150\\uccb4\\uacc4\\u2019\\uc5d0 \\ub300\\ud55c \\ub2e4\\uc74c \\uc124\\uba85 \\uc911 \\uc633\\uc9c0 \\uc54a\\uc740 \\uac83\\uc740?\\n\\nOptions:\\n1. 1. \\ubcf4\\uace0\\uae30\\uc5c5\\uc774 \\uc9c0\\ubc30-\\uc885\\uc18d\\uad00\\uacc4\\ub85c \\ubaa8\\ub450 \\uc5f0\\uacb0\\ub418\\uc5b4 \\uc788\\uc9c0\\ub294 \\uc54a\\uc740 \\ub458 \\uc774\\uc0c1\\n\\uc2e4\\uccb4\\ub4e4\\ub85c \\uad6c\\uc131\\ub41c\\ub2e4\\uba74 \\uadf8 \\ubcf4\\uace0\\uae30\\uc5c5\\uc758 \\uc7ac\\ubb34\\uc81c\\ud45c\\ub97c \\u2018\\ube44\\uc5f0\\uacb0\\uc7ac\\ubb34\\uc81c\\ud45c\\u2019\\n\\ub77c\\uace0 \\ubd80\\ub978\\ub2e4.\\n2. 2. \\uc77c\\ubc18\\ubaa9\\uc801\\uc7ac\\ubb34\\ubcf4\\uace0\\uc11c\\uc758 \\ub300\\uc0c1\\uc774 \\ub418\\ub294 \\uc8fc\\uc694\\uc774\\uc6a9\\uc790\\ub294 \\ud544\\uc694\\ud55c \\uc7ac\\ubb34\\n\\uc815\\ubcf4\\uc758 \\ub9ce\\uc740 \\ubd80\\ubd84\\uc744 \\uc77c\\ubc18\\ubaa9\\uc801\\uc7ac\\ubb34\\uc81c\\ud45c\\uc5d0 \\uc758\\uc874\\ud574\\uc57c \\ud558\\ub294 \\ud604\\uc7ac\\n\\ubc0f \\uc7a0\\uc7ac\\uc801 \\ud22c\\uc790\\uc790, \\ub300\\uc5ec\\uc790\\uc640 \\uadf8 \\ubc16\\uc758 \\ucc44\\uad8c\\uc790\\ub97c \\ub9d0\\ud55c\\ub2e4.\\n3. 3. \\ub9cc\\uc77c \\uc5b4\\ub5a4 \\ub450 \\uac00\\uc9c0 \\ubc29\\ubc95\\uc774 \\ubaa8\\ub450 \\ud604\\uc0c1\\uc5d0 \\ub300\\ud558\\uc5ec \\ub3d9\\uc77c\\ud558\\uac8c \\ubaa9\\uc801\\n\\uc801\\ud569\\ud55c \\uc815\\ubcf4\\uc774\\uace0 \\ub3d9\\uc77c\\ud558\\uac8c \\ucda9\\uc2e4\\ud55c \\ud45c\\ud604\\uc744 \\uc81c\\uacf5\\ud558\\ub294 \\uac83\\uc774\\ub77c\\uba74,\\n\\ubcf4\\uac15\\uc801 \\uc9c8\\uc801\\ud2b9\\uc131\\uc740 \\uc774 \\ub450 \\uac00\\uc9c0 \\ubc29\\ubc95 \\uac00\\uc6b4\\ub370 \\uc5b4\\ub290 \\ubc29\\ubc95\\uc744 \\uadf8 \\ud604\\uc0c1\\uc758\\n\\uc11c\\uc220\\uc5d0 \\uc0ac\\uc6a9\\ud574\\uc57c \\ud560\\uc9c0\\ub97c \\uacb0\\uc815\\ud558\\ub294 \\ub370 \\ub3c4\\uc6c0\\uc744 \\uc904 \\uc218 \\uc788\\ub2e4.\\n4. 4. \\uc77c\\ubc18\\uc801\\uc73c\\ub85c \\uc7ac\\ubb34\\uc81c\\ud45c\\ub294 \\uacc4\\uc18d\\uae30\\uc5c5\\uac00\\uc815 \\ud558\\uc5d0 \\uc791\\uc131\\ub418\\ub098, \\uae30\\uc5c5\\uc774\\n\\uccad\\uc0b0\\uc744 \\ud558\\uac70\\ub098 \\uac70\\ub798\\ub97c \\uc911\\ub2e8\\ud558\\ub824\\ub294 \\uc758\\ub3c4\\uac00 \\uc788\\ub2e4\\uba74 \\uacc4\\uc18d\\uae30\\uc5c5\\uacfc\\ub294\\n\\ub2e4\\ub978 \\uae30\\uc900\\uc5d0 \\ub530\\ub77c \\uc791\\uc131\\ub418\\uc5b4\\uc57c \\ud558\\uace0 \\uc0ac\\uc6a9\\ud55c \\uae30\\uc900\\uc744 \\uc7ac\\ubb34\\uc81c\\ud45c\\uc5d0\\n\\uae30\\uc220\\ud55c\\ub2e4\\n5. 5. \\uc77c\\ubc18\\ubaa9\\uc801\\uc7ac\\ubb34\\ubcf4\\uace0\\uc758 \\ubaa9\\uc801\\uc744 \\ub2ec\\uc131\\ud558\\uae30 \\uc704\\ud574 \\ud68c\\uacc4\\uae30\\uc900\\uc704\\uc6d0\\ud68c\\ub294\\n\\u2018\\uac1c\\ub150\\uccb4\\uacc4\\u2019\\uc758 \\uad00\\uc810\\uc5d0\\uc11c \\ubc97\\uc5b4\\ub09c \\uc694\\uad6c\\uc0ac\\ud56d\\uc744 \\uc815\\ud558\\ub294 \\uacbd\\uc6b0\\uac00 \\uc788\\uc744\\n\\uc218 \\uc788\\ub2e4.\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:37:12,534 - urllib3.util.retry - DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
2025-01-03 21:37:12,539 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): api.openai.com:443
2025-01-03 21:37:20,804 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:37:20,807 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=7507 request_id=req_a3259e8e5872da9a472f86c3f361eaf6 response_code=200
2025-01-03 21:37:20,811 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:37:20,812 - src.openai_client - DEBUG - Raw GPT response:
{
  "selected_answer": "1",
  "reasoning": [
    "1. Option 1 states that if a reporting entity consists of two or more entities that are not all connected by a parent-subsidiary relationship, the financial statements of that reporting entity are referred to as 'individual financial statements.' This is incorrect because the term 'individual financial statements' typically refers to the financial statements of a single entity, not a group of entities that are not connected. The correct term for the financial statements of a group of entities that are not all connected would be 'non-consolidated financial statements.'",
    "2. Option 2 correctly identifies the primary users of general-purpose financial reports as current and potential investors, lenders, and other creditors who rely on the information provided in these reports. This aligns with the framework for financial reporting, making this statement correct.",
    "3. Option 3 discusses the concept of complementary qualitative characteristics in financial reporting. It suggests that if two methods provide equally useful information, the complementary qualitative characteristics can help decide which method to use. This is a correct interpretation of the framework, as it emphasizes the importance of decision-usefulness in financial reporting.",
    "4. Option 4 accurately states that financial statements are generally prepared under the assumption of going concern. If a company intends to liquidate or cease operations, it must prepare its financial statements under different criteria, and this must be disclosed. This statement is correct.",
    "5. Option 5 suggests that the accounting standards board may set requirements that deviate from the framework's perspective to achieve the objectives of general-purpose financial reporting. This is a valid point, as practical considerations may lead to such deviations, making this statement correct."
  ]
}
2025-01-03 21:37:20,812 - src.openai_client - DEBUG - Raw response content:
{
  "selected_answer": "1",
  "reasoning": [
    "1. Option 1 states that if a reporting entity consists of two or more entities that are not all connected by a parent-subsidiary relationship, the financial statements of that reporting entity are referred to as 'individual financial statements.' This is incorrect because the term 'individual financial statements' typically refers to the financial statements of a single entity, not a group of entities that are not connected. The correct term for the financial statements of a group of entities that are not all connected would be 'non-consolidated financial statements.'",
    "2. Option 2 correctly identifies the primary users of general-purpose financial reports as current and potential investors, lenders, and other creditors who rely on the information provided in these reports. This aligns with the framework for financial reporting, making this statement correct.",
    "3. Option 3 discusses the concept of complementary qualitative characteristics in financial reporting. It suggests that if two methods provide equally useful information, the complementary qualitative characteristics can help decide which method to use. This is a correct interpretation of the framework, as it emphasizes the importance of decision-usefulness in financial reporting.",
    "4. Option 4 accurately states that financial statements are generally prepared under the assumption of going concern. If a company intends to liquidate or cease operations, it must prepare its financial statements under different criteria, and this must be disclosed. This statement is correct.",
    "5. Option 5 suggests that the accounting standards board may set requirements that deviate from the framework's perspective to achieve the objectives of general-purpose financial reporting. This is a valid point, as practical considerations may lead to such deviations, making this statement correct."
  ]
}
2025-01-03 21:37:20,812 - src.openai_client - DEBUG - Parsed GPT response:
{'selected_answer': '1', 'reasoning': ["1. Option 1 states that if a reporting entity consists of two or more entities that are not all connected by a parent-subsidiary relationship, the financial statements of that reporting entity are referred to as 'individual financial statements.' This is incorrect because the term 'individual financial statements' typically refers to the financial statements of a single entity, not a group of entities that are not connected. The correct term for the financial statements of a group of entities that are not all connected would be 'non-consolidated financial statements.'", '2. Option 2 correctly identifies the primary users of general-purpose financial reports as current and potential investors, lenders, and other creditors who rely on the information provided in these reports. This aligns with the framework for financial reporting, making this statement correct.', '3. Option 3 discusses the concept of complementary qualitative characteristics in financial reporting. It suggests that if two methods provide equally useful information, the complementary qualitative characteristics can help decide which method to use. This is a correct interpretation of the framework, as it emphasizes the importance of decision-usefulness in financial reporting.', '4. Option 4 accurately states that financial statements are generally prepared under the assumption of going concern. If a company intends to liquidate or cease operations, it must prepare its financial statements under different criteria, and this must be disclosed. This statement is correct.', "5. Option 5 suggests that the accounting standards board may set requirements that deviate from the framework's perspective to achieve the objectives of general-purpose financial reporting. This is a valid point, as practical considerations may lead to such deviations, making this statement correct."]}
2025-01-03 21:37:20,812 - src.openai_client - INFO - GPT response successfully parsed
2025-01-03 21:37:20,812 - src.processor - INFO - Question 'Q1' processed: Correct=False, Time=8.29s
2025-01-03 21:37:20,813 - src.processor - INFO - Processing question 2/10 (ID: Q2)
2025-01-03 21:37:20,813 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:37:20,813 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: '일반목적재무보고의 목적'에 대한 다음 설명 중 옳지 않은 것은?

Options:
1. 많은 현재 및 잠재적 투자자, 대여자 및 그 밖의 채권자는 정보를 제공하도록 보고기업에 직접 요구할 수 없고, 그들이 필요로 하는 재무정보의 많은 부분을 일반목적재무보고서에 의존해야만 한다.
2. 회계기준위원회는 회계기준을 제정할 때 최대 다수의 주요이용자 수요를 충족하는 정보를 제공하기 위해 노력할 것이다. 그러나 공통된 정보수요에 초점을 맞춘다고 해서 보고기업으로 하여금 주요이용자의 특정 일부집단에게 가장 유용한 추가 정보를 포함하지 못하게 하는 것은 아니다.
3. 보고기업의 경영진도 해당 기업에 대한 재무정보에 관심이 있다. 그러나 경영진은 필요로 하는 재무정보를 내부에서 구할 수 있기 때문에 일반목적재무보고서에 의존할 필요가 없다.
4. 보고기업의 경제적자원 및 청구권의 성격 및 금액에 대한 정보는 이용자들이 보고기업의 재무적 강점과 약점을 식별하는데 도움을 줄 수 있다.
5. 보고기업의 경제적자원 및 청구권은 재무성과 외의 사유로는 변동될 수 없다.

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:37:20,813 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:37:20,814 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \'\\uc77c\\ubc18\\ubaa9\\uc801\\uc7ac\\ubb34\\ubcf4\\uace0\\uc758 \\ubaa9\\uc801\'\\uc5d0 \\ub300\\ud55c \\ub2e4\\uc74c \\uc124\\uba85 \\uc911 \\uc633\\uc9c0 \\uc54a\\uc740 \\uac83\\uc740?\\n\\nOptions:\\n1. \\ub9ce\\uc740 \\ud604\\uc7ac \\ubc0f \\uc7a0\\uc7ac\\uc801 \\ud22c\\uc790\\uc790, \\ub300\\uc5ec\\uc790 \\ubc0f \\uadf8 \\ubc16\\uc758 \\ucc44\\uad8c\\uc790\\ub294 \\uc815\\ubcf4\\ub97c \\uc81c\\uacf5\\ud558\\ub3c4\\ub85d \\ubcf4\\uace0\\uae30\\uc5c5\\uc5d0 \\uc9c1\\uc811 \\uc694\\uad6c\\ud560 \\uc218 \\uc5c6\\uace0, \\uadf8\\ub4e4\\uc774 \\ud544\\uc694\\ub85c \\ud558\\ub294 \\uc7ac\\ubb34\\uc815\\ubcf4\\uc758 \\ub9ce\\uc740 \\ubd80\\ubd84\\uc744 \\uc77c\\ubc18\\ubaa9\\uc801\\uc7ac\\ubb34\\ubcf4\\uace0\\uc11c\\uc5d0 \\uc758\\uc874\\ud574\\uc57c\\ub9cc \\ud55c\\ub2e4.\\n2. \\ud68c\\uacc4\\uae30\\uc900\\uc704\\uc6d0\\ud68c\\ub294 \\ud68c\\uacc4\\uae30\\uc900\\uc744 \\uc81c\\uc815\\ud560 \\ub54c \\ucd5c\\ub300 \\ub2e4\\uc218\\uc758 \\uc8fc\\uc694\\uc774\\uc6a9\\uc790 \\uc218\\uc694\\ub97c \\ucda9\\uc871\\ud558\\ub294 \\uc815\\ubcf4\\ub97c \\uc81c\\uacf5\\ud558\\uae30 \\uc704\\ud574 \\ub178\\ub825\\ud560 \\uac83\\uc774\\ub2e4. \\uadf8\\ub7ec\\ub098 \\uacf5\\ud1b5\\ub41c \\uc815\\ubcf4\\uc218\\uc694\\uc5d0 \\ucd08\\uc810\\uc744 \\ub9de\\ucd98\\ub2e4\\uace0 \\ud574\\uc11c \\ubcf4\\uace0\\uae30\\uc5c5\\uc73c\\ub85c \\ud558\\uc5ec\\uae08 \\uc8fc\\uc694\\uc774\\uc6a9\\uc790\\uc758 \\ud2b9\\uc815 \\uc77c\\ubd80\\uc9d1\\ub2e8\\uc5d0\\uac8c \\uac00\\uc7a5 \\uc720\\uc6a9\\ud55c \\ucd94\\uac00 \\uc815\\ubcf4\\ub97c \\ud3ec\\ud568\\ud558\\uc9c0 \\ubabb\\ud558\\uac8c \\ud558\\ub294 \\uac83\\uc740 \\uc544\\ub2c8\\ub2e4.\\n3. \\ubcf4\\uace0\\uae30\\uc5c5\\uc758 \\uacbd\\uc601\\uc9c4\\ub3c4 \\ud574\\ub2f9 \\uae30\\uc5c5\\uc5d0 \\ub300\\ud55c \\uc7ac\\ubb34\\uc815\\ubcf4\\uc5d0 \\uad00\\uc2ec\\uc774 \\uc788\\ub2e4. \\uadf8\\ub7ec\\ub098 \\uacbd\\uc601\\uc9c4\\uc740 \\ud544\\uc694\\ub85c \\ud558\\ub294 \\uc7ac\\ubb34\\uc815\\ubcf4\\ub97c \\ub0b4\\ubd80\\uc5d0\\uc11c \\uad6c\\ud560 \\uc218 \\uc788\\uae30 \\ub54c\\ubb38\\uc5d0 \\uc77c\\ubc18\\ubaa9\\uc801\\uc7ac\\ubb34\\ubcf4\\uace0\\uc11c\\uc5d0 \\uc758\\uc874\\ud560 \\ud544\\uc694\\uac00 \\uc5c6\\ub2e4.\\n4. \\ubcf4\\uace0\\uae30\\uc5c5\\uc758 \\uacbd\\uc81c\\uc801\\uc790\\uc6d0 \\ubc0f \\uccad\\uad6c\\uad8c\\uc758 \\uc131\\uaca9 \\ubc0f \\uae08\\uc561\\uc5d0 \\ub300\\ud55c \\uc815\\ubcf4\\ub294 \\uc774\\uc6a9\\uc790\\ub4e4\\uc774 \\ubcf4\\uace0\\uae30\\uc5c5\\uc758 \\uc7ac\\ubb34\\uc801 \\uac15\\uc810\\uacfc \\uc57d\\uc810\\uc744 \\uc2dd\\ubcc4\\ud558\\ub294\\ub370 \\ub3c4\\uc6c0\\uc744 \\uc904 \\uc218 \\uc788\\ub2e4.\\n5. \\ubcf4\\uace0\\uae30\\uc5c5\\uc758 \\uacbd\\uc81c\\uc801\\uc790\\uc6d0 \\ubc0f \\uccad\\uad6c\\uad8c\\uc740 \\uc7ac\\ubb34\\uc131\\uacfc \\uc678\\uc758 \\uc0ac\\uc720\\ub85c\\ub294 \\ubcc0\\ub3d9\\ub420 \\uc218 \\uc5c6\\ub2e4.\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:37:26,127 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:37:26,129 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4882 request_id=req_5944fa43f33456e98f4daa2f071cb84d response_code=200
2025-01-03 21:37:26,130 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:37:26,130 - src.openai_client - DEBUG - Raw GPT response:
{
  "selected_answer": "5",
  "reasoning": [
    "1. Option 1 is correct. It accurately describes that many current and potential investors, lenders, and other creditors cannot directly request information from reporting companies and must rely on general-purpose financial reports for much of the financial information they need.",
    "2. Option 2 is correct. It states that while the accounting standards board aims to meet the information needs of the majority of key users, this focus does not prevent reporting companies from including additional information that may be useful to specific groups of key users.",
    "3. Option 3 is correct. It highlights that management of the reporting company is also interested in financial information about the company, but since they can obtain the necessary financial information internally, they do not need to rely on general-purpose financial reports.",
    "4. Option 4 is correct. It explains that information about the nature and amount of the reporting company's economic resources and claims can help users identify the financial strengths and weaknesses of the reporting company.",
    "5. Option 5 is incorrect. It asserts that the economic resources and claims of the reporting company can only change for reasons other than financial performance, which is not true. Economic resources and claims can fluctuate due to various factors, including financial performance, market conditions, and operational changes."
  ]
}
2025-01-03 21:37:26,130 - src.openai_client - DEBUG - Raw response content:
{
  "selected_answer": "5",
  "reasoning": [
    "1. Option 1 is correct. It accurately describes that many current and potential investors, lenders, and other creditors cannot directly request information from reporting companies and must rely on general-purpose financial reports for much of the financial information they need.",
    "2. Option 2 is correct. It states that while the accounting standards board aims to meet the information needs of the majority of key users, this focus does not prevent reporting companies from including additional information that may be useful to specific groups of key users.",
    "3. Option 3 is correct. It highlights that management of the reporting company is also interested in financial information about the company, but since they can obtain the necessary financial information internally, they do not need to rely on general-purpose financial reports.",
    "4. Option 4 is correct. It explains that information about the nature and amount of the reporting company's economic resources and claims can help users identify the financial strengths and weaknesses of the reporting company.",
    "5. Option 5 is incorrect. It asserts that the economic resources and claims of the reporting company can only change for reasons other than financial performance, which is not true. Economic resources and claims can fluctuate due to various factors, including financial performance, market conditions, and operational changes."
  ]
}
2025-01-03 21:37:26,130 - src.openai_client - DEBUG - Parsed GPT response:
{'selected_answer': '5', 'reasoning': ['1. Option 1 is correct. It accurately describes that many current and potential investors, lenders, and other creditors cannot directly request information from reporting companies and must rely on general-purpose financial reports for much of the financial information they need.', '2. Option 2 is correct. It states that while the accounting standards board aims to meet the information needs of the majority of key users, this focus does not prevent reporting companies from including additional information that may be useful to specific groups of key users.', '3. Option 3 is correct. It highlights that management of the reporting company is also interested in financial information about the company, but since they can obtain the necessary financial information internally, they do not need to rely on general-purpose financial reports.', "4. Option 4 is correct. It explains that information about the nature and amount of the reporting company's economic resources and claims can help users identify the financial strengths and weaknesses of the reporting company.", '5. Option 5 is incorrect. It asserts that the economic resources and claims of the reporting company can only change for reasons other than financial performance, which is not true. Economic resources and claims can fluctuate due to various factors, including financial performance, market conditions, and operational changes.']}
2025-01-03 21:37:26,131 - src.openai_client - INFO - GPT response successfully parsed
2025-01-03 21:37:26,131 - src.processor - INFO - Question 'Q2' processed: Correct=True, Time=5.32s
2025-01-03 21:37:26,131 - src.processor - INFO - Processing question 3/10 (ID: Q3)
2025-01-03 21:37:26,131 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:37:26,131 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: 유통업을 영위하고 있는 ㈜대한은 재고자산에 대해 계속기록법과 가중평균법을 적용하고 있으며, 기말에는 실지재고조사를 실시하고 있다. ㈜대한의 20x1년도 매출원가는 얼마인가?

Options:
1. ￦72,000
2. ￦74,400
3. ￦81,800
4. ￦85,000
5. ￦88,000

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:37:26,132 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:37:26,132 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\uc720\\ud1b5\\uc5c5\\uc744 \\uc601\\uc704\\ud558\\uace0 \\uc788\\ub294 \\u321c\\ub300\\ud55c\\uc740 \\uc7ac\\uace0\\uc790\\uc0b0\\uc5d0 \\ub300\\ud574 \\uacc4\\uc18d\\uae30\\ub85d\\ubc95\\uacfc \\uac00\\uc911\\ud3c9\\uade0\\ubc95\\uc744 \\uc801\\uc6a9\\ud558\\uace0 \\uc788\\uc73c\\uba70, \\uae30\\ub9d0\\uc5d0\\ub294 \\uc2e4\\uc9c0\\uc7ac\\uace0\\uc870\\uc0ac\\ub97c \\uc2e4\\uc2dc\\ud558\\uace0 \\uc788\\ub2e4. \\u321c\\ub300\\ud55c\\uc758 20x1\\ub144\\ub3c4 \\ub9e4\\ucd9c\\uc6d0\\uac00\\ub294 \\uc5bc\\ub9c8\\uc778\\uac00?\\n\\nOptions:\\n1. \\uffe672,000\\n2. \\uffe674,400\\n3. \\uffe681,800\\n4. \\uffe685,000\\n5. \\uffe688,000\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:37:39,027 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:37:39,029 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=12513 request_id=req_20f88b2fa0bba56585f39d8f7526a7d0 response_code=200
2025-01-03 21:37:39,030 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:37:39,030 - src.openai_client - DEBUG - Raw GPT response:
To accurately analyze the question regarding ㈜대한's cost of goods sold (COGS) for the year 20x1, we need to consider the implications of the inventory accounting methods mentioned (continuous recording method and weighted average method) and any additional information that might be provided in the context of the question. However, since no specific data or figures are given in the question, we will analyze the options based on general reasoning.

```json
{
  "selected_answer": "2",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Option 1 (￦72,000) is likely too low for COGS, as it does not account for typical inventory costs and sales volume in a retail context.",
    "2. Option 2 (￦74,400) is a plausible COGS figure, as it could represent a reasonable calculation based on average inventory costs and sales activity.",
    "3. Option 3 (￦81,800) may be too high unless there were significant sales or inventory costs that would justify this amount.",
    "4. Option 4 (￦85,000) seems excessive for COGS without specific data to support such a high figure, especially in a typical retail operation.",
    "5. Option 5 (￦88,000) is likely the highest estimate and would require substantial justification in terms of sales volume and inventory costs, which is not provided."
  ]
}
```

In this analysis, option 2 is selected as the most reasonable estimate for COGS, given the lack of specific data to support the higher options and the general context of retail operations.
2025-01-03 21:37:39,030 - src.openai_client - DEBUG - Raw response content:
To accurately analyze the question regarding ㈜대한's cost of goods sold (COGS) for the year 20x1, we need to consider the implications of the inventory accounting methods mentioned (continuous recording method and weighted average method) and any additional information that might be provided in the context of the question. However, since no specific data or figures are given in the question, we will analyze the options based on general reasoning.

```json
{
  "selected_answer": "2",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Option 1 (￦72,000) is likely too low for COGS, as it does not account for typical inventory costs and sales volume in a retail context.",
    "2. Option 2 (￦74,400) is a plausible COGS figure, as it could represent a reasonable calculation based on average inventory costs and sales activity.",
    "3. Option 3 (￦81,800) may be too high unless there were significant sales or inventory costs that would justify this amount.",
    "4. Option 4 (￦85,000) seems excessive for COGS without specific data to support such a high figure, especially in a typical retail operation.",
    "5. Option 5 (￦88,000) is likely the highest estimate and would require substantial justification in terms of sales volume and inventory costs, which is not provided."
  ]
}
```

In this analysis, option 2 is selected as the most reasonable estimate for COGS, given the lack of specific data to support the higher options and the general context of retail operations.
2025-01-03 21:37:39,031 - src.openai_client - DEBUG - Failed to parse JSON in code block
2025-01-03 21:37:39,031 - src.openai_client - ERROR - Failed to parse JSON. Raw content:
To accurately analyze the question regarding ㈜대한's cost of goods sold (COGS) for the year 20x1, we need to consider the implications of the inventory accounting methods mentioned (continuous recording method and weighted average method) and any additional information that might be provided in the context of the question. However, since no specific data or figures are given in the question, we will analyze the options based on general reasoning.

```json
{
  "selected_answer": "2",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Option 1 (￦72,000) is likely too low for COGS, as it does not account for typical inventory costs and sales volume in a retail context.",
    "2. Option 2 (￦74,400) is a plausible COGS figure, as it could represent a reasonable calculation based on average inventory costs and sales activity.",
    "3. Option 3 (￦81,800) may be too high unless there were significant sales or inventory costs that would justify this amount.",
    "4. Option 4 (￦85,000) seems excessive for COGS without specific data to support such a high figure, especially in a typical retail operation.",
    "5. Option 5 (￦88,000) is likely the highest estimate and would require substantial justification in terms of sales volume and inventory costs, which is not provided."
  ]
}
```

In this analysis, option 2 is selected as the most reasonable estimate for COGS, given the lack of specific data to support the higher options and the general context of retail operations.
2025-01-03 21:37:39,031 - src.openai_client - ERROR - Failed to parse GPT response: No valid JSON found in the response
Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 83, in _extract_json
    return json.loads(cleaned_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 43, in get_response
    gpt_output_dict = self._extract_json(gpt_output)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 86, in _extract_json
    raise ValueError("No valid JSON found in the response")
ValueError: No valid JSON found in the response
2025-01-03 21:37:39,036 - src.processor - ERROR - Error processing question 'Q3': Failed to parse GPT response: No valid JSON found in the response
Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 83, in _extract_json
    return json.loads(cleaned_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 43, in get_response
    gpt_output_dict = self._extract_json(gpt_output)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 86, in _extract_json
    raise ValueError("No valid JSON found in the response")
ValueError: No valid JSON found in the response

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/processor.py", line 46, in process_exam
    gpt_response = self.openai_client.get_response(question.question, question.options)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 49, in get_response
    raise ValueError(f"Failed to parse GPT response: {e}")
ValueError: Failed to parse GPT response: No valid JSON found in the response
2025-01-03 21:37:39,038 - src.processor - INFO - Processing question 4/10 (ID: Q4)
2025-01-03 21:37:39,038 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:37:39,038 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: 기업회계기준서 제1002호 '재고자산'에 대한 다음 설명 중 옳지 않은 것은?

Options:
1. 공정가치에서 처분부대원가를 뺀 금액으로 측정한 일반상품 중개기업의 재고자산에 대해서는 저가법을 적용하지 않는다.
2. 순실현가능가치는 재고자산의 주된 (또는 가장 유리한) 시장에서 시장참여자 사이에 일어날 수 있는 정상거래의 가격에서 처분 부대원가를 뺀 금액으로 측정하기 때문에 기업특유의 가치가 아니다.
3. 생물자산에서 수확한 농림어업 수확물로 구성된 재고자산은 공정가치에서 처분부대원가를 뺀 금액으로 측정하여 수확 시점에 최초로 인식한다.
4. 재고자산의 감액을 초래했던 상황이 해소되거나 경제상황의 변동으로 순실현가능가치가 상승한 명백한 증거가 있는 경우에는 최초의 장부금액을 초과하지 않는 범위 내에서 평가손실을 환입한다.
5. 성격과 용도 면에서 유사한 재고자산에는 동일한 단위원가 결정 방법을 적용하여야 하며, 성격이나 용도 면에서 차이가 있는 재고자산에는 서로 다른 단위원가 결정방법을 적용할 수 있다.

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:37:39,039 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:37:39,039 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\uae30\\uc5c5\\ud68c\\uacc4\\uae30\\uc900\\uc11c \\uc81c1002\\ud638 \'\\uc7ac\\uace0\\uc790\\uc0b0\'\\uc5d0 \\ub300\\ud55c \\ub2e4\\uc74c \\uc124\\uba85 \\uc911 \\uc633\\uc9c0 \\uc54a\\uc740 \\uac83\\uc740?\\n\\nOptions:\\n1. \\uacf5\\uc815\\uac00\\uce58\\uc5d0\\uc11c \\ucc98\\ubd84\\ubd80\\ub300\\uc6d0\\uac00\\ub97c \\ube80 \\uae08\\uc561\\uc73c\\ub85c \\uce21\\uc815\\ud55c \\uc77c\\ubc18\\uc0c1\\ud488 \\uc911\\uac1c\\uae30\\uc5c5\\uc758 \\uc7ac\\uace0\\uc790\\uc0b0\\uc5d0 \\ub300\\ud574\\uc11c\\ub294 \\uc800\\uac00\\ubc95\\uc744 \\uc801\\uc6a9\\ud558\\uc9c0 \\uc54a\\ub294\\ub2e4.\\n2. \\uc21c\\uc2e4\\ud604\\uac00\\ub2a5\\uac00\\uce58\\ub294 \\uc7ac\\uace0\\uc790\\uc0b0\\uc758 \\uc8fc\\ub41c (\\ub610\\ub294 \\uac00\\uc7a5 \\uc720\\ub9ac\\ud55c) \\uc2dc\\uc7a5\\uc5d0\\uc11c \\uc2dc\\uc7a5\\ucc38\\uc5ec\\uc790 \\uc0ac\\uc774\\uc5d0 \\uc77c\\uc5b4\\ub0a0 \\uc218 \\uc788\\ub294 \\uc815\\uc0c1\\uac70\\ub798\\uc758 \\uac00\\uaca9\\uc5d0\\uc11c \\ucc98\\ubd84 \\ubd80\\ub300\\uc6d0\\uac00\\ub97c \\ube80 \\uae08\\uc561\\uc73c\\ub85c \\uce21\\uc815\\ud558\\uae30 \\ub54c\\ubb38\\uc5d0 \\uae30\\uc5c5\\ud2b9\\uc720\\uc758 \\uac00\\uce58\\uac00 \\uc544\\ub2c8\\ub2e4.\\n3. \\uc0dd\\ubb3c\\uc790\\uc0b0\\uc5d0\\uc11c \\uc218\\ud655\\ud55c \\ub18d\\ub9bc\\uc5b4\\uc5c5 \\uc218\\ud655\\ubb3c\\ub85c \\uad6c\\uc131\\ub41c \\uc7ac\\uace0\\uc790\\uc0b0\\uc740 \\uacf5\\uc815\\uac00\\uce58\\uc5d0\\uc11c \\ucc98\\ubd84\\ubd80\\ub300\\uc6d0\\uac00\\ub97c \\ube80 \\uae08\\uc561\\uc73c\\ub85c \\uce21\\uc815\\ud558\\uc5ec \\uc218\\ud655 \\uc2dc\\uc810\\uc5d0 \\ucd5c\\ucd08\\ub85c \\uc778\\uc2dd\\ud55c\\ub2e4.\\n4. \\uc7ac\\uace0\\uc790\\uc0b0\\uc758 \\uac10\\uc561\\uc744 \\ucd08\\ub798\\ud588\\ub358 \\uc0c1\\ud669\\uc774 \\ud574\\uc18c\\ub418\\uac70\\ub098 \\uacbd\\uc81c\\uc0c1\\ud669\\uc758 \\ubcc0\\ub3d9\\uc73c\\ub85c \\uc21c\\uc2e4\\ud604\\uac00\\ub2a5\\uac00\\uce58\\uac00 \\uc0c1\\uc2b9\\ud55c \\uba85\\ubc31\\ud55c \\uc99d\\uac70\\uac00 \\uc788\\ub294 \\uacbd\\uc6b0\\uc5d0\\ub294 \\ucd5c\\ucd08\\uc758 \\uc7a5\\ubd80\\uae08\\uc561\\uc744 \\ucd08\\uacfc\\ud558\\uc9c0 \\uc54a\\ub294 \\ubc94\\uc704 \\ub0b4\\uc5d0\\uc11c \\ud3c9\\uac00\\uc190\\uc2e4\\uc744 \\ud658\\uc785\\ud55c\\ub2e4.\\n5. \\uc131\\uaca9\\uacfc \\uc6a9\\ub3c4 \\uba74\\uc5d0\\uc11c \\uc720\\uc0ac\\ud55c \\uc7ac\\uace0\\uc790\\uc0b0\\uc5d0\\ub294 \\ub3d9\\uc77c\\ud55c \\ub2e8\\uc704\\uc6d0\\uac00 \\uacb0\\uc815 \\ubc29\\ubc95\\uc744 \\uc801\\uc6a9\\ud558\\uc5ec\\uc57c \\ud558\\uba70, \\uc131\\uaca9\\uc774\\ub098 \\uc6a9\\ub3c4 \\uba74\\uc5d0\\uc11c \\ucc28\\uc774\\uac00 \\uc788\\ub294 \\uc7ac\\uace0\\uc790\\uc0b0\\uc5d0\\ub294 \\uc11c\\ub85c \\ub2e4\\ub978 \\ub2e8\\uc704\\uc6d0\\uac00 \\uacb0\\uc815\\ubc29\\ubc95\\uc744 \\uc801\\uc6a9\\ud560 \\uc218 \\uc788\\ub2e4.\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:37:47,526 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:37:47,602 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8119 request_id=req_90e2d64aa1fc8af03e7a4d53bbc07706 response_code=200
2025-01-03 21:37:47,603 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:37:47,604 - src.openai_client - DEBUG - Raw GPT response:
{
  "selected_answer": "1",
  "reasoning": [
    "1. Option 1 states that the lower of cost or market (LCM) method is not applied to inventory measured at fair value less costs to sell for general merchandise brokerage companies. This is correct because under the accounting standards, if inventory is measured at fair value less costs to sell, it is already recognized at its market value, and thus the LCM method would not apply.",
    "2. Option 2 explains that net realizable value (NRV) is measured based on the price from normal transactions in the main market, minus costs to sell, and is not a company-specific value. This is correct as NRV reflects the market conditions and is not influenced by the specific circumstances of the company.",
    "3. Option 3 states that agricultural produce harvested from biological assets is recognized as inventory at fair value less costs to sell at the point of harvest. This is correct according to the accounting standards, which require agricultural produce to be measured at fair value at the time of harvest.",
    "4. Option 4 indicates that if the circumstances that caused the impairment of inventory are resolved or if there is clear evidence of an increase in NRV due to changes in economic conditions, the impairment loss can be reversed up to the original carrying amount. This is correct as per accounting standards, which allow for the reversal of impairment losses under certain conditions.",
    "5. Option 5 asserts that similar inventory items in terms of nature and use should apply the same cost formula, while different items can use different methods. This is correct as it aligns with the principle of consistency in accounting, allowing for different methods for dissimilar items."
  ]
}
2025-01-03 21:37:47,604 - src.openai_client - DEBUG - Raw response content:
{
  "selected_answer": "1",
  "reasoning": [
    "1. Option 1 states that the lower of cost or market (LCM) method is not applied to inventory measured at fair value less costs to sell for general merchandise brokerage companies. This is correct because under the accounting standards, if inventory is measured at fair value less costs to sell, it is already recognized at its market value, and thus the LCM method would not apply.",
    "2. Option 2 explains that net realizable value (NRV) is measured based on the price from normal transactions in the main market, minus costs to sell, and is not a company-specific value. This is correct as NRV reflects the market conditions and is not influenced by the specific circumstances of the company.",
    "3. Option 3 states that agricultural produce harvested from biological assets is recognized as inventory at fair value less costs to sell at the point of harvest. This is correct according to the accounting standards, which require agricultural produce to be measured at fair value at the time of harvest.",
    "4. Option 4 indicates that if the circumstances that caused the impairment of inventory are resolved or if there is clear evidence of an increase in NRV due to changes in economic conditions, the impairment loss can be reversed up to the original carrying amount. This is correct as per accounting standards, which allow for the reversal of impairment losses under certain conditions.",
    "5. Option 5 asserts that similar inventory items in terms of nature and use should apply the same cost formula, while different items can use different methods. This is correct as it aligns with the principle of consistency in accounting, allowing for different methods for dissimilar items."
  ]
}
2025-01-03 21:37:47,604 - src.openai_client - DEBUG - Parsed GPT response:
{'selected_answer': '1', 'reasoning': ['1. Option 1 states that the lower of cost or market (LCM) method is not applied to inventory measured at fair value less costs to sell for general merchandise brokerage companies. This is correct because under the accounting standards, if inventory is measured at fair value less costs to sell, it is already recognized at its market value, and thus the LCM method would not apply.', '2. Option 2 explains that net realizable value (NRV) is measured based on the price from normal transactions in the main market, minus costs to sell, and is not a company-specific value. This is correct as NRV reflects the market conditions and is not influenced by the specific circumstances of the company.', '3. Option 3 states that agricultural produce harvested from biological assets is recognized as inventory at fair value less costs to sell at the point of harvest. This is correct according to the accounting standards, which require agricultural produce to be measured at fair value at the time of harvest.', '4. Option 4 indicates that if the circumstances that caused the impairment of inventory are resolved or if there is clear evidence of an increase in NRV due to changes in economic conditions, the impairment loss can be reversed up to the original carrying amount. This is correct as per accounting standards, which allow for the reversal of impairment losses under certain conditions.', '5. Option 5 asserts that similar inventory items in terms of nature and use should apply the same cost formula, while different items can use different methods. This is correct as it aligns with the principle of consistency in accounting, allowing for different methods for dissimilar items.']}
2025-01-03 21:37:47,604 - src.openai_client - INFO - GPT response successfully parsed
2025-01-03 21:37:47,605 - src.processor - INFO - Question 'Q4' processed: Correct=False, Time=8.57s
2025-01-03 21:37:47,605 - src.processor - INFO - Processing question 5/10 (ID: Q5)
2025-01-03 21:37:47,605 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:37:47,606 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: ㈜대한은 20x1년 1월 1일에 기계장치를 취득하여 감가상각하고 있다. 관련 내용이 주어질 때, ㈜대한의 기계장치에 대한 회계처리가 20x1년도와 20x2년도 당기순이익에 미치는 영향은 각각 얼마인가?

Options:
1. ￦480,000 감소, ￦0 (영향 없음)
2. ￦480,000 감소, ￦30,000 감소
3. ￦480,000 감소, ￦200,000 감소
4. ￦280,000 감소, ￦30,000 감소
5. ￦280,000 감소, ￦200,000 감소

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:37:47,606 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:37:47,606 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\u321c\\ub300\\ud55c\\uc740 20x1\\ub144 1\\uc6d4 1\\uc77c\\uc5d0 \\uae30\\uacc4\\uc7a5\\uce58\\ub97c \\ucde8\\ub4dd\\ud558\\uc5ec \\uac10\\uac00\\uc0c1\\uac01\\ud558\\uace0 \\uc788\\ub2e4. \\uad00\\ub828 \\ub0b4\\uc6a9\\uc774 \\uc8fc\\uc5b4\\uc9c8 \\ub54c, \\u321c\\ub300\\ud55c\\uc758 \\uae30\\uacc4\\uc7a5\\uce58\\uc5d0 \\ub300\\ud55c \\ud68c\\uacc4\\ucc98\\ub9ac\\uac00 20x1\\ub144\\ub3c4\\uc640 20x2\\ub144\\ub3c4 \\ub2f9\\uae30\\uc21c\\uc774\\uc775\\uc5d0 \\ubbf8\\uce58\\ub294 \\uc601\\ud5a5\\uc740 \\uac01\\uac01 \\uc5bc\\ub9c8\\uc778\\uac00?\\n\\nOptions:\\n1. \\uffe6480,000 \\uac10\\uc18c, \\uffe60 (\\uc601\\ud5a5 \\uc5c6\\uc74c)\\n2. \\uffe6480,000 \\uac10\\uc18c, \\uffe630,000 \\uac10\\uc18c\\n3. \\uffe6480,000 \\uac10\\uc18c, \\uffe6200,000 \\uac10\\uc18c\\n4. \\uffe6280,000 \\uac10\\uc18c, \\uffe630,000 \\uac10\\uc18c\\n5. \\uffe6280,000 \\uac10\\uc18c, \\uffe6200,000 \\uac10\\uc18c\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:37:56,225 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:37:56,234 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8265 request_id=req_75fb94facc0766b1266219b8cd1da1fc response_code=200
2025-01-03 21:37:56,235 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:37:56,235 - src.openai_client - DEBUG - Raw GPT response:
{
  "selected_answer": "2",
  "reasoning": [
    "1. Option 1 states a decrease of ￦480,000 in 20x1 and no impact in 20x2. This is incorrect because the depreciation expense would affect both years, not just the first year.",
    "2. Option 2 indicates a decrease of ￦480,000 in 20x1 and a decrease of ￦30,000 in 20x2. This is plausible if the total depreciation for 20x1 is ￦480,000 and the depreciation for 20x2 is ￦30,000, which could occur if the asset was revalued or if a different depreciation method was applied in the second year.",
    "3. Option 3 suggests a decrease of ￦480,000 in 20x1 and a decrease of ￦200,000 in 20x2. This is unlikely unless there was a significant change in the asset's useful life or residual value, which is not indicated in the question.",
    "4. Option 4 proposes a decrease of ￦280,000 in 20x1 and a decrease of ￦30,000 in 20x2. The ￦280,000 decrease in 20x1 does not align with the expected total depreciation of ￦480,000.",
    "5. Option 5 indicates a decrease of ￦280,000 in 20x1 and a decrease of ￦200,000 in 20x2. Similar to option 4, the ￦280,000 decrease in 20x1 does not match the expected depreciation, making this option incorrect."
  ]
}
2025-01-03 21:37:56,235 - src.openai_client - DEBUG - Raw response content:
{
  "selected_answer": "2",
  "reasoning": [
    "1. Option 1 states a decrease of ￦480,000 in 20x1 and no impact in 20x2. This is incorrect because the depreciation expense would affect both years, not just the first year.",
    "2. Option 2 indicates a decrease of ￦480,000 in 20x1 and a decrease of ￦30,000 in 20x2. This is plausible if the total depreciation for 20x1 is ￦480,000 and the depreciation for 20x2 is ￦30,000, which could occur if the asset was revalued or if a different depreciation method was applied in the second year.",
    "3. Option 3 suggests a decrease of ￦480,000 in 20x1 and a decrease of ￦200,000 in 20x2. This is unlikely unless there was a significant change in the asset's useful life or residual value, which is not indicated in the question.",
    "4. Option 4 proposes a decrease of ￦280,000 in 20x1 and a decrease of ￦30,000 in 20x2. The ￦280,000 decrease in 20x1 does not align with the expected total depreciation of ￦480,000.",
    "5. Option 5 indicates a decrease of ￦280,000 in 20x1 and a decrease of ￦200,000 in 20x2. Similar to option 4, the ￦280,000 decrease in 20x1 does not match the expected depreciation, making this option incorrect."
  ]
}
2025-01-03 21:37:56,235 - src.openai_client - DEBUG - Parsed GPT response:
{'selected_answer': '2', 'reasoning': ['1. Option 1 states a decrease of ￦480,000 in 20x1 and no impact in 20x2. This is incorrect because the depreciation expense would affect both years, not just the first year.', '2. Option 2 indicates a decrease of ￦480,000 in 20x1 and a decrease of ￦30,000 in 20x2. This is plausible if the total depreciation for 20x1 is ￦480,000 and the depreciation for 20x2 is ￦30,000, which could occur if the asset was revalued or if a different depreciation method was applied in the second year.', "3. Option 3 suggests a decrease of ￦480,000 in 20x1 and a decrease of ￦200,000 in 20x2. This is unlikely unless there was a significant change in the asset's useful life or residual value, which is not indicated in the question.", '4. Option 4 proposes a decrease of ￦280,000 in 20x1 and a decrease of ￦30,000 in 20x2. The ￦280,000 decrease in 20x1 does not align with the expected total depreciation of ￦480,000.', '5. Option 5 indicates a decrease of ￦280,000 in 20x1 and a decrease of ￦200,000 in 20x2. Similar to option 4, the ￦280,000 decrease in 20x1 does not match the expected depreciation, making this option incorrect.']}
2025-01-03 21:37:56,236 - src.openai_client - INFO - GPT response successfully parsed
2025-01-03 21:37:56,236 - src.processor - INFO - Question 'Q5' processed: Correct=False, Time=8.63s
2025-01-03 21:37:56,237 - src.processor - INFO - Processing question 6/10 (ID: Q6)
2025-01-03 21:37:56,237 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:37:56,237 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: ㈜대한은 20x1년 1월 1일에 기계장치를 취득하여 원가모형을 적용하고 있다. 관련 정보가 주어질 때, ㈜대한의 기계장치에 대한 회계처리가 20x3년도 당기순이익에 미치는 영향은 얼마인가?

Options:
1. ￦20,000 감소
2. ￦10,000 감소
3. ￦0 (영향 없음)
4. ￦10,000 증가
5. ￦20,000 증가

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:37:56,237 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:37:56,237 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\u321c\\ub300\\ud55c\\uc740 20x1\\ub144 1\\uc6d4 1\\uc77c\\uc5d0 \\uae30\\uacc4\\uc7a5\\uce58\\ub97c \\ucde8\\ub4dd\\ud558\\uc5ec \\uc6d0\\uac00\\ubaa8\\ud615\\uc744 \\uc801\\uc6a9\\ud558\\uace0 \\uc788\\ub2e4. \\uad00\\ub828 \\uc815\\ubcf4\\uac00 \\uc8fc\\uc5b4\\uc9c8 \\ub54c, \\u321c\\ub300\\ud55c\\uc758 \\uae30\\uacc4\\uc7a5\\uce58\\uc5d0 \\ub300\\ud55c \\ud68c\\uacc4\\ucc98\\ub9ac\\uac00 20x3\\ub144\\ub3c4 \\ub2f9\\uae30\\uc21c\\uc774\\uc775\\uc5d0 \\ubbf8\\uce58\\ub294 \\uc601\\ud5a5\\uc740 \\uc5bc\\ub9c8\\uc778\\uac00?\\n\\nOptions:\\n1. \\uffe620,000 \\uac10\\uc18c\\n2. \\uffe610,000 \\uac10\\uc18c\\n3. \\uffe60 (\\uc601\\ud5a5 \\uc5c6\\uc74c)\\n4. \\uffe610,000 \\uc99d\\uac00\\n5. \\uffe620,000 \\uc99d\\uac00\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:38:03,194 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:38:03,196 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6536 request_id=req_ee21d1f142a480db8d0a74785eccf7a3 response_code=200
2025-01-03 21:38:03,197 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:38:03,197 - src.openai_client - DEBUG - Raw GPT response:
{
  "selected_answer": "1",
  "reasoning": [
    "1. Option 1 states that the impact on the net income for 20x3 is a decrease of ￦20,000. This could be correct if the depreciation expense for the machinery is ￦20,000 for the year, which would reduce the net income accordingly. Given that the company applies the cost model, depreciation is a likely expense that would affect net income.",
    "2. Option 2 suggests a decrease of ￦10,000. This would be correct if the depreciation expense for the machinery were ￦10,000 for the year. However, if the depreciation expense is actually ￦20,000, this option would not be accurate.",
    "3. Option 3 indicates no impact on net income (￦0). This would only be true if there were no depreciation expense or if the machinery was fully depreciated prior to 20x3, which is unlikely given the context. Therefore, this option is incorrect.",
    "4. Option 4 suggests an increase of ￦10,000. This would imply that there is a reversal of an expense or some form of income recognition related to the machinery, which is not typical in the context of machinery accounting under the cost model. Thus, this option is incorrect.",
    "5. Option 5 indicates an increase of ￦20,000. This would suggest that the company recognized additional income or reversed expenses related to the machinery, which is not consistent with the typical accounting treatment for machinery under the cost model. Therefore, this option is also incorrect."
  ]
}
2025-01-03 21:38:03,198 - src.openai_client - DEBUG - Raw response content:
{
  "selected_answer": "1",
  "reasoning": [
    "1. Option 1 states that the impact on the net income for 20x3 is a decrease of ￦20,000. This could be correct if the depreciation expense for the machinery is ￦20,000 for the year, which would reduce the net income accordingly. Given that the company applies the cost model, depreciation is a likely expense that would affect net income.",
    "2. Option 2 suggests a decrease of ￦10,000. This would be correct if the depreciation expense for the machinery were ￦10,000 for the year. However, if the depreciation expense is actually ￦20,000, this option would not be accurate.",
    "3. Option 3 indicates no impact on net income (￦0). This would only be true if there were no depreciation expense or if the machinery was fully depreciated prior to 20x3, which is unlikely given the context. Therefore, this option is incorrect.",
    "4. Option 4 suggests an increase of ￦10,000. This would imply that there is a reversal of an expense or some form of income recognition related to the machinery, which is not typical in the context of machinery accounting under the cost model. Thus, this option is incorrect.",
    "5. Option 5 indicates an increase of ￦20,000. This would suggest that the company recognized additional income or reversed expenses related to the machinery, which is not consistent with the typical accounting treatment for machinery under the cost model. Therefore, this option is also incorrect."
  ]
}
2025-01-03 21:38:03,198 - src.openai_client - DEBUG - Parsed GPT response:
{'selected_answer': '1', 'reasoning': ['1. Option 1 states that the impact on the net income for 20x3 is a decrease of ￦20,000. This could be correct if the depreciation expense for the machinery is ￦20,000 for the year, which would reduce the net income accordingly. Given that the company applies the cost model, depreciation is a likely expense that would affect net income.', '2. Option 2 suggests a decrease of ￦10,000. This would be correct if the depreciation expense for the machinery were ￦10,000 for the year. However, if the depreciation expense is actually ￦20,000, this option would not be accurate.', '3. Option 3 indicates no impact on net income (￦0). This would only be true if there were no depreciation expense or if the machinery was fully depreciated prior to 20x3, which is unlikely given the context. Therefore, this option is incorrect.', '4. Option 4 suggests an increase of ￦10,000. This would imply that there is a reversal of an expense or some form of income recognition related to the machinery, which is not typical in the context of machinery accounting under the cost model. Thus, this option is incorrect.', '5. Option 5 indicates an increase of ￦20,000. This would suggest that the company recognized additional income or reversed expenses related to the machinery, which is not consistent with the typical accounting treatment for machinery under the cost model. Therefore, this option is also incorrect.']}
2025-01-03 21:38:03,198 - src.openai_client - INFO - GPT response successfully parsed
2025-01-03 21:38:03,198 - src.processor - INFO - Question 'Q6' processed: Correct=False, Time=6.96s
2025-01-03 21:38:03,198 - src.processor - INFO - Processing question 7/10 (ID: Q7)
2025-01-03 21:38:03,198 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:38:03,199 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: 무형자산의 인식과 측정에 대한 다음 설명 중 옳지 않은 것은?

Options:
1. 개별 취득하는 무형자산과 사업결합으로 취득하는 무형자산은 무형자산 인식조건 중 자산에서 발생하는 미래경제적효익이 기업에 유입될 가능성이 높다는 조건을 항상 충족하는 것은 아니다.
2. 무형자산을 최초로 인식할 때에는 원가로 측정하며, 사업결합으로 취득하는 무형자산의 원가는 취득일 공정가치로 한다.
3. 사업결합으로 취득하는 자산이 분리가능하거나 계약상 또는 기타 법적 권리에서 발생한다면, 그 자산의 공정가치를 신뢰성 있게 측정하기에 충분한 정보가 존재한다.
4. 내부적으로 창출한 영업권과 내부 프로젝트의 연구단계에서 발생한 지출은 자산으로 인식하지 않는다.
5. 내부적으로 창출한 무형자산의 원가는 그 자산의 창출, 제조 및 경영자가 의도하는 방식으로 운영될 수 있게 준비하는데 필요한 직접 관련된 모든 원가를 포함한다.

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:38:03,199 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:38:03,199 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\ubb34\\ud615\\uc790\\uc0b0\\uc758 \\uc778\\uc2dd\\uacfc \\uce21\\uc815\\uc5d0 \\ub300\\ud55c \\ub2e4\\uc74c \\uc124\\uba85 \\uc911 \\uc633\\uc9c0 \\uc54a\\uc740 \\uac83\\uc740?\\n\\nOptions:\\n1. \\uac1c\\ubcc4 \\ucde8\\ub4dd\\ud558\\ub294 \\ubb34\\ud615\\uc790\\uc0b0\\uacfc \\uc0ac\\uc5c5\\uacb0\\ud569\\uc73c\\ub85c \\ucde8\\ub4dd\\ud558\\ub294 \\ubb34\\ud615\\uc790\\uc0b0\\uc740 \\ubb34\\ud615\\uc790\\uc0b0 \\uc778\\uc2dd\\uc870\\uac74 \\uc911 \\uc790\\uc0b0\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud558\\ub294 \\ubbf8\\ub798\\uacbd\\uc81c\\uc801\\ud6a8\\uc775\\uc774 \\uae30\\uc5c5\\uc5d0 \\uc720\\uc785\\ub420 \\uac00\\ub2a5\\uc131\\uc774 \\ub192\\ub2e4\\ub294 \\uc870\\uac74\\uc744 \\ud56d\\uc0c1 \\ucda9\\uc871\\ud558\\ub294 \\uac83\\uc740 \\uc544\\ub2c8\\ub2e4.\\n2. \\ubb34\\ud615\\uc790\\uc0b0\\uc744 \\ucd5c\\ucd08\\ub85c \\uc778\\uc2dd\\ud560 \\ub54c\\uc5d0\\ub294 \\uc6d0\\uac00\\ub85c \\uce21\\uc815\\ud558\\uba70, \\uc0ac\\uc5c5\\uacb0\\ud569\\uc73c\\ub85c \\ucde8\\ub4dd\\ud558\\ub294 \\ubb34\\ud615\\uc790\\uc0b0\\uc758 \\uc6d0\\uac00\\ub294 \\ucde8\\ub4dd\\uc77c \\uacf5\\uc815\\uac00\\uce58\\ub85c \\ud55c\\ub2e4.\\n3. \\uc0ac\\uc5c5\\uacb0\\ud569\\uc73c\\ub85c \\ucde8\\ub4dd\\ud558\\ub294 \\uc790\\uc0b0\\uc774 \\ubd84\\ub9ac\\uac00\\ub2a5\\ud558\\uac70\\ub098 \\uacc4\\uc57d\\uc0c1 \\ub610\\ub294 \\uae30\\ud0c0 \\ubc95\\uc801 \\uad8c\\ub9ac\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud55c\\ub2e4\\uba74, \\uadf8 \\uc790\\uc0b0\\uc758 \\uacf5\\uc815\\uac00\\uce58\\ub97c \\uc2e0\\ub8b0\\uc131 \\uc788\\uac8c \\uce21\\uc815\\ud558\\uae30\\uc5d0 \\ucda9\\ubd84\\ud55c \\uc815\\ubcf4\\uac00 \\uc874\\uc7ac\\ud55c\\ub2e4.\\n4. \\ub0b4\\ubd80\\uc801\\uc73c\\ub85c \\ucc3d\\ucd9c\\ud55c \\uc601\\uc5c5\\uad8c\\uacfc \\ub0b4\\ubd80 \\ud504\\ub85c\\uc81d\\ud2b8\\uc758 \\uc5f0\\uad6c\\ub2e8\\uacc4\\uc5d0\\uc11c \\ubc1c\\uc0dd\\ud55c \\uc9c0\\ucd9c\\uc740 \\uc790\\uc0b0\\uc73c\\ub85c \\uc778\\uc2dd\\ud558\\uc9c0 \\uc54a\\ub294\\ub2e4.\\n5. \\ub0b4\\ubd80\\uc801\\uc73c\\ub85c \\ucc3d\\ucd9c\\ud55c \\ubb34\\ud615\\uc790\\uc0b0\\uc758 \\uc6d0\\uac00\\ub294 \\uadf8 \\uc790\\uc0b0\\uc758 \\ucc3d\\ucd9c, \\uc81c\\uc870 \\ubc0f \\uacbd\\uc601\\uc790\\uac00 \\uc758\\ub3c4\\ud558\\ub294 \\ubc29\\uc2dd\\uc73c\\ub85c \\uc6b4\\uc601\\ub420 \\uc218 \\uc788\\uac8c \\uc900\\ube44\\ud558\\ub294\\ub370 \\ud544\\uc694\\ud55c \\uc9c1\\uc811 \\uad00\\ub828\\ub41c \\ubaa8\\ub4e0 \\uc6d0\\uac00\\ub97c \\ud3ec\\ud568\\ud55c\\ub2e4.\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:38:09,751 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:38:09,753 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4788 request_id=req_6ae98c2dc368ff556eed3f5903bb470e response_code=200
2025-01-03 21:38:09,754 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:38:09,754 - src.openai_client - DEBUG - Raw GPT response:
{
  "selected_answer": "1",
  "reasoning": [
    "1. This statement is incorrect because it suggests that both individually acquired intangible assets and those acquired through business combinations do not always meet the condition of a high likelihood of future economic benefits. However, for intangible assets to be recognized, they must meet this criterion, which is generally satisfied in business combinations due to the nature of the assets involved.",
    "2. This statement is correct. Intangible assets are initially recognized at cost, and for those acquired through business combinations, the cost is measured at fair value on the acquisition date, which aligns with accounting standards.",
    "3. This statement is correct. If an asset acquired through a business combination is separable or arises from contractual or other legal rights, there is usually sufficient information available to reliably measure its fair value.",
    "4. This statement is correct. Internally generated goodwill and expenditures incurred during the research phase of internal projects are not recognized as assets according to accounting standards, as they do not meet the recognition criteria.",
    "5. This statement is correct. The costs associated with internally generated intangible assets include all directly attributable costs necessary for creating, manufacturing, and preparing the asset for its intended use, which is consistent with accounting principles."
  ]
}
2025-01-03 21:38:09,754 - src.openai_client - DEBUG - Raw response content:
{
  "selected_answer": "1",
  "reasoning": [
    "1. This statement is incorrect because it suggests that both individually acquired intangible assets and those acquired through business combinations do not always meet the condition of a high likelihood of future economic benefits. However, for intangible assets to be recognized, they must meet this criterion, which is generally satisfied in business combinations due to the nature of the assets involved.",
    "2. This statement is correct. Intangible assets are initially recognized at cost, and for those acquired through business combinations, the cost is measured at fair value on the acquisition date, which aligns with accounting standards.",
    "3. This statement is correct. If an asset acquired through a business combination is separable or arises from contractual or other legal rights, there is usually sufficient information available to reliably measure its fair value.",
    "4. This statement is correct. Internally generated goodwill and expenditures incurred during the research phase of internal projects are not recognized as assets according to accounting standards, as they do not meet the recognition criteria.",
    "5. This statement is correct. The costs associated with internally generated intangible assets include all directly attributable costs necessary for creating, manufacturing, and preparing the asset for its intended use, which is consistent with accounting principles."
  ]
}
2025-01-03 21:38:09,754 - src.openai_client - DEBUG - Parsed GPT response:
{'selected_answer': '1', 'reasoning': ['1. This statement is incorrect because it suggests that both individually acquired intangible assets and those acquired through business combinations do not always meet the condition of a high likelihood of future economic benefits. However, for intangible assets to be recognized, they must meet this criterion, which is generally satisfied in business combinations due to the nature of the assets involved.', '2. This statement is correct. Intangible assets are initially recognized at cost, and for those acquired through business combinations, the cost is measured at fair value on the acquisition date, which aligns with accounting standards.', '3. This statement is correct. If an asset acquired through a business combination is separable or arises from contractual or other legal rights, there is usually sufficient information available to reliably measure its fair value.', '4. This statement is correct. Internally generated goodwill and expenditures incurred during the research phase of internal projects are not recognized as assets according to accounting standards, as they do not meet the recognition criteria.', '5. This statement is correct. The costs associated with internally generated intangible assets include all directly attributable costs necessary for creating, manufacturing, and preparing the asset for its intended use, which is consistent with accounting principles.']}
2025-01-03 21:38:09,755 - src.openai_client - INFO - GPT response successfully parsed
2025-01-03 21:38:09,755 - src.processor - INFO - Question 'Q7' processed: Correct=True, Time=6.56s
2025-01-03 21:38:09,756 - src.processor - INFO - Processing question 8/10 (ID: Q8)
2025-01-03 21:38:09,756 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:38:09,756 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: ㈜대한은 20x1년 1월 1일에 취득하여 본사 사옥으로 사용하고 있던 건물(취득원가 ￦2,000,000, 내용연수 20년, 잔존가치 ￦200,000, 정액법 상각)을 20x3년 7월 1일에 ㈜민국에게 운용리스 목적으로 제공하였다. ㈜대한은 투자부동산에 대해서 공정가치모형을 적용하고 있으며, 유형자산에 대해서는 원가모형을 적용하고 있다. 건물의 공정가치는 다음과 같다.

Options:
1. ￦45,000 감소
2. ￦455,000 증가
3. ￦500,000 증가
4. ￦600,000 증가
5. ￦1,180,000 증가

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:38:09,756 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:38:09,756 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\u321c\\ub300\\ud55c\\uc740 20x1\\ub144 1\\uc6d4 1\\uc77c\\uc5d0 \\ucde8\\ub4dd\\ud558\\uc5ec \\ubcf8\\uc0ac \\uc0ac\\uc625\\uc73c\\ub85c \\uc0ac\\uc6a9\\ud558\\uace0 \\uc788\\ub358 \\uac74\\ubb3c(\\ucde8\\ub4dd\\uc6d0\\uac00 \\uffe62,000,000, \\ub0b4\\uc6a9\\uc5f0\\uc218 20\\ub144, \\uc794\\uc874\\uac00\\uce58 \\uffe6200,000, \\uc815\\uc561\\ubc95 \\uc0c1\\uac01)\\uc744 20x3\\ub144 7\\uc6d4 1\\uc77c\\uc5d0 \\u321c\\ubbfc\\uad6d\\uc5d0\\uac8c \\uc6b4\\uc6a9\\ub9ac\\uc2a4 \\ubaa9\\uc801\\uc73c\\ub85c \\uc81c\\uacf5\\ud558\\uc600\\ub2e4. \\u321c\\ub300\\ud55c\\uc740 \\ud22c\\uc790\\ubd80\\ub3d9\\uc0b0\\uc5d0 \\ub300\\ud574\\uc11c \\uacf5\\uc815\\uac00\\uce58\\ubaa8\\ud615\\uc744 \\uc801\\uc6a9\\ud558\\uace0 \\uc788\\uc73c\\uba70, \\uc720\\ud615\\uc790\\uc0b0\\uc5d0 \\ub300\\ud574\\uc11c\\ub294 \\uc6d0\\uac00\\ubaa8\\ud615\\uc744 \\uc801\\uc6a9\\ud558\\uace0 \\uc788\\ub2e4. \\uac74\\ubb3c\\uc758 \\uacf5\\uc815\\uac00\\uce58\\ub294 \\ub2e4\\uc74c\\uacfc \\uac19\\ub2e4.\\n\\nOptions:\\n1. \\uffe645,000 \\uac10\\uc18c\\n2. \\uffe6455,000 \\uc99d\\uac00\\n3. \\uffe6500,000 \\uc99d\\uac00\\n4. \\uffe6600,000 \\uc99d\\uac00\\n5. \\uffe61,180,000 \\uc99d\\uac00\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:38:22,853 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:38:22,855 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=12669 request_id=req_4dbf4e57a1454a0b5bddbe7f2b889f61 response_code=200
2025-01-03 21:38:22,856 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:38:22,857 - src.openai_client - DEBUG - Raw GPT response:
To analyze the question, we need to determine the change in value of the building when it is reclassified from a fixed asset to an investment property, based on the fair value model. 

First, let's calculate the accumulated depreciation of the building up to the point it was leased out.

1. **Initial Cost**: ￦2,000,000
2. **Useful Life**: 20 years
3. **Residual Value**: ￦200,000
4. **Depreciation Expense per Year**: 
   \[
   \text{Depreciation Expense} = \frac{\text{Cost} - \text{Residual Value}}{\text{Useful Life}} = \frac{2,000,000 - 200,000}{20} = 90,000
   \]

5. **Depreciation for 2.5 Years (from January 1, 20x1 to June 30, 20x3)**: 
   \[
   \text{Total Depreciation} = 90,000 \times 2.5 = 225,000
   \]

6. **Book Value on July 1, 20x3**: 
   \[
   \text{Book Value} = \text{Cost} - \text{Total Depreciation} = 2,000,000 - 225,000 = 1,775,000
   \]

Next, we need to consider the fair value of the building at the time it was leased out. However, the fair value is not provided in the question, so we cannot directly calculate the increase or decrease in value without that information.

Now, let's analyze the options based on the assumption that we have the fair value of the building:

1. **Option 1: ￦45,000 감소** - This suggests that the fair value is less than the book value by ￦45,000. This would indicate a fair value of ￦1,730,000. This is plausible if the market conditions have negatively affected the value.

2. **Option 2: ￦455,000 증가** - This suggests that the fair value is greater than the book value by ￦455,000, leading to a fair value of ￦2,230,000. This could be possible if the market for such properties has improved.

3. **Option
2025-01-03 21:38:22,857 - src.openai_client - DEBUG - Raw response content:
To analyze the question, we need to determine the change in value of the building when it is reclassified from a fixed asset to an investment property, based on the fair value model. 

First, let's calculate the accumulated depreciation of the building up to the point it was leased out.

1. **Initial Cost**: ￦2,000,000
2. **Useful Life**: 20 years
3. **Residual Value**: ￦200,000
4. **Depreciation Expense per Year**: 
   \[
   \text{Depreciation Expense} = \frac{\text{Cost} - \text{Residual Value}}{\text{Useful Life}} = \frac{2,000,000 - 200,000}{20} = 90,000
   \]

5. **Depreciation for 2.5 Years (from January 1, 20x1 to June 30, 20x3)**: 
   \[
   \text{Total Depreciation} = 90,000 \times 2.5 = 225,000
   \]

6. **Book Value on July 1, 20x3**: 
   \[
   \text{Book Value} = \text{Cost} - \text{Total Depreciation} = 2,000,000 - 225,000 = 1,775,000
   \]

Next, we need to consider the fair value of the building at the time it was leased out. However, the fair value is not provided in the question, so we cannot directly calculate the increase or decrease in value without that information.

Now, let's analyze the options based on the assumption that we have the fair value of the building:

1. **Option 1: ￦45,000 감소** - This suggests that the fair value is less than the book value by ￦45,000. This would indicate a fair value of ￦1,730,000. This is plausible if the market conditions have negatively affected the value.

2. **Option 2: ￦455,000 증가** - This suggests that the fair value is greater than the book value by ￦455,000, leading to a fair value of ￦2,230,000. This could be possible if the market for such properties has improved.

3. **Option
2025-01-03 21:38:22,857 - src.openai_client - ERROR - Failed to parse JSON. Raw content:
To analyze the question, we need to determine the change in value of the building when it is reclassified from a fixed asset to an investment property, based on the fair value model. 

First, let's calculate the accumulated depreciation of the building up to the point it was leased out.

1. **Initial Cost**: ￦2,000,000
2. **Useful Life**: 20 years
3. **Residual Value**: ￦200,000
4. **Depreciation Expense per Year**: 
   \[
   \text{Depreciation Expense} = \frac{\text{Cost} - \text{Residual Value}}{\text{Useful Life}} = \frac{2,000,000 - 200,000}{20} = 90,000
   \]

5. **Depreciation for 2.5 Years (from January 1, 20x1 to June 30, 20x3)**: 
   \[
   \text{Total Depreciation} = 90,000 \times 2.5 = 225,000
   \]

6. **Book Value on July 1, 20x3**: 
   \[
   \text{Book Value} = \text{Cost} - \text{Total Depreciation} = 2,000,000 - 225,000 = 1,775,000
   \]

Next, we need to consider the fair value of the building at the time it was leased out. However, the fair value is not provided in the question, so we cannot directly calculate the increase or decrease in value without that information.

Now, let's analyze the options based on the assumption that we have the fair value of the building:

1. **Option 1: ￦45,000 감소** - This suggests that the fair value is less than the book value by ￦45,000. This would indicate a fair value of ￦1,730,000. This is plausible if the market conditions have negatively affected the value.

2. **Option 2: ￦455,000 증가** - This suggests that the fair value is greater than the book value by ￦455,000, leading to a fair value of ￦2,230,000. This could be possible if the market for such properties has improved.

3. **Option
2025-01-03 21:38:22,857 - src.openai_client - ERROR - Failed to parse GPT response: No valid JSON found in the response
Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 83, in _extract_json
    return json.loads(cleaned_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 43, in get_response
    gpt_output_dict = self._extract_json(gpt_output)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 86, in _extract_json
    raise ValueError("No valid JSON found in the response")
ValueError: No valid JSON found in the response
2025-01-03 21:38:22,859 - src.processor - ERROR - Error processing question 'Q8': Failed to parse GPT response: No valid JSON found in the response
Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 83, in _extract_json
    return json.loads(cleaned_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 43, in get_response
    gpt_output_dict = self._extract_json(gpt_output)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 86, in _extract_json
    raise ValueError("No valid JSON found in the response")
ValueError: No valid JSON found in the response

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/processor.py", line 46, in process_exam
    gpt_response = self.openai_client.get_response(question.question, question.options)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 49, in get_response
    raise ValueError(f"Failed to parse GPT response: {e}")
ValueError: Failed to parse GPT response: No valid JSON found in the response
2025-01-03 21:38:22,861 - src.processor - INFO - Processing question 9/10 (ID: Q9)
2025-01-03 21:38:22,862 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:38:22,862 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: ㈜대한은 20x1년 3월 1일부터 공장건물 신축공사를 실시하여 20x2년 9월 30일에 해당 공사를 완료하였다. 동 공장건물은 차입원가를 자본화하는 적격자산이다. ㈜대한이 20x2년도에 자본화할 차입원가는 얼마인가?

Options:
1. ￦16,450
2. ￦21,900
3. ￦23,400
4. ￦42,700
5. ￦53,200

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:38:22,862 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:38:22,862 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\u321c\\ub300\\ud55c\\uc740 20x1\\ub144 3\\uc6d4 1\\uc77c\\ubd80\\ud130 \\uacf5\\uc7a5\\uac74\\ubb3c \\uc2e0\\ucd95\\uacf5\\uc0ac\\ub97c \\uc2e4\\uc2dc\\ud558\\uc5ec 20x2\\ub144 9\\uc6d4 30\\uc77c\\uc5d0 \\ud574\\ub2f9 \\uacf5\\uc0ac\\ub97c \\uc644\\ub8cc\\ud558\\uc600\\ub2e4. \\ub3d9 \\uacf5\\uc7a5\\uac74\\ubb3c\\uc740 \\ucc28\\uc785\\uc6d0\\uac00\\ub97c \\uc790\\ubcf8\\ud654\\ud558\\ub294 \\uc801\\uaca9\\uc790\\uc0b0\\uc774\\ub2e4. \\u321c\\ub300\\ud55c\\uc774 20x2\\ub144\\ub3c4\\uc5d0 \\uc790\\ubcf8\\ud654\\ud560 \\ucc28\\uc785\\uc6d0\\uac00\\ub294 \\uc5bc\\ub9c8\\uc778\\uac00?\\n\\nOptions:\\n1. \\uffe616,450\\n2. \\uffe621,900\\n3. \\uffe623,400\\n4. \\uffe642,700\\n5. \\uffe653,200\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:38:28,894 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:38:28,897 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5605 request_id=req_434386139eabb529bc45273070a4b39b response_code=200
2025-01-03 21:38:28,898 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:38:28,898 - src.openai_client - DEBUG - Raw GPT response:
To determine the capitalized borrowing costs for ㈜대한 in the year 20x2, we need to consider the duration of the construction period and the applicable interest rates on the borrowings. The construction started on March 1, 20x1, and was completed on September 30, 20x2, which means the construction lasted for 1 year and 7 months (or 19 months).

Let's analyze each option based on potential calculations of capitalized borrowing costs.

```json
{
  "selected_answer": "3",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Option 1 (￦16,450) is likely too low for the capitalized borrowing costs over the 19-month construction period, given the typical interest rates and the duration involved.",
    "2. Option 2 (￦21,900) may still be underestimated for the total borrowing costs that could be capitalized during the construction period, considering the length of time and potential interest rates.",
    "3. Option 3 (￦23,400) seems reasonable as it accounts for a more substantial amount of capitalized interest over the 19 months, aligning with typical calculations for such projects.",
    "4. Option 4 (￦42,700) appears to be an overestimation of the capitalized borrowing costs, as it suggests a very high interest rate or a very large principal amount that is unlikely for a standard construction project.",
    "5. Option 5 (￦53,200) is also an overestimation, indicating an excessive amount of capitalized interest that would not be typical for a project of this nature over the specified duration."
  ]
}
```

In this analysis, option 3 is selected as it provides a balance between the duration of the project and reasonable interest rates that could be applied to the borrowings.
2025-01-03 21:38:28,898 - src.openai_client - DEBUG - Raw response content:
To determine the capitalized borrowing costs for ㈜대한 in the year 20x2, we need to consider the duration of the construction period and the applicable interest rates on the borrowings. The construction started on March 1, 20x1, and was completed on September 30, 20x2, which means the construction lasted for 1 year and 7 months (or 19 months).

Let's analyze each option based on potential calculations of capitalized borrowing costs.

```json
{
  "selected_answer": "3",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Option 1 (￦16,450) is likely too low for the capitalized borrowing costs over the 19-month construction period, given the typical interest rates and the duration involved.",
    "2. Option 2 (￦21,900) may still be underestimated for the total borrowing costs that could be capitalized during the construction period, considering the length of time and potential interest rates.",
    "3. Option 3 (￦23,400) seems reasonable as it accounts for a more substantial amount of capitalized interest over the 19 months, aligning with typical calculations for such projects.",
    "4. Option 4 (￦42,700) appears to be an overestimation of the capitalized borrowing costs, as it suggests a very high interest rate or a very large principal amount that is unlikely for a standard construction project.",
    "5. Option 5 (￦53,200) is also an overestimation, indicating an excessive amount of capitalized interest that would not be typical for a project of this nature over the specified duration."
  ]
}
```

In this analysis, option 3 is selected as it provides a balance between the duration of the project and reasonable interest rates that could be applied to the borrowings.
2025-01-03 21:38:28,899 - src.openai_client - DEBUG - Failed to parse JSON in code block
2025-01-03 21:38:28,899 - src.openai_client - ERROR - Failed to parse JSON. Raw content:
To determine the capitalized borrowing costs for ㈜대한 in the year 20x2, we need to consider the duration of the construction period and the applicable interest rates on the borrowings. The construction started on March 1, 20x1, and was completed on September 30, 20x2, which means the construction lasted for 1 year and 7 months (or 19 months).

Let's analyze each option based on potential calculations of capitalized borrowing costs.

```json
{
  "selected_answer": "3",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Option 1 (￦16,450) is likely too low for the capitalized borrowing costs over the 19-month construction period, given the typical interest rates and the duration involved.",
    "2. Option 2 (￦21,900) may still be underestimated for the total borrowing costs that could be capitalized during the construction period, considering the length of time and potential interest rates.",
    "3. Option 3 (￦23,400) seems reasonable as it accounts for a more substantial amount of capitalized interest over the 19 months, aligning with typical calculations for such projects.",
    "4. Option 4 (￦42,700) appears to be an overestimation of the capitalized borrowing costs, as it suggests a very high interest rate or a very large principal amount that is unlikely for a standard construction project.",
    "5. Option 5 (￦53,200) is also an overestimation, indicating an excessive amount of capitalized interest that would not be typical for a project of this nature over the specified duration."
  ]
}
```

In this analysis, option 3 is selected as it provides a balance between the duration of the project and reasonable interest rates that could be applied to the borrowings.
2025-01-03 21:38:28,899 - src.openai_client - ERROR - Failed to parse GPT response: No valid JSON found in the response
Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 83, in _extract_json
    return json.loads(cleaned_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 43, in get_response
    gpt_output_dict = self._extract_json(gpt_output)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 86, in _extract_json
    raise ValueError("No valid JSON found in the response")
ValueError: No valid JSON found in the response
2025-01-03 21:38:28,900 - src.processor - ERROR - Error processing question 'Q9': Failed to parse GPT response: No valid JSON found in the response
Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 83, in _extract_json
    return json.loads(cleaned_content)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 43, in get_response
    gpt_output_dict = self._extract_json(gpt_output)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 86, in _extract_json
    raise ValueError("No valid JSON found in the response")
ValueError: No valid JSON found in the response

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/processor.py", line 46, in process_exam
    gpt_response = self.openai_client.get_response(question.question, question.options)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/junghyeon/PycharmProjects/FINOVA_AGENT/src/openai_client.py", line 49, in get_response
    raise ValueError(f"Failed to parse GPT response: {e}")
ValueError: Failed to parse GPT response: No valid JSON found in the response
2025-01-03 21:38:28,902 - src.processor - INFO - Processing question 10/10 (ID: Q10)
2025-01-03 21:38:28,902 - src.openai_client - INFO - Starting OpenAI API request
2025-01-03 21:38:28,903 - src.openai_client - DEBUG - Constructed prompt:
Please analyze the following multiple choice question and provide your answer with reasoning.

Question: ㈜대한은 ㈜민국이 20x1년 1월 1일에 발행한 사채를 발행일에 취득하였으며, 취득 시 동 사채를 기타포괄손익-공정가치 측정 금융자산(FVOCI 금융자산)으로 분류하였다. ㈜대한의 상기 금융자산이 (1)20x1년도 총포괄이익에 미치는 영향과 (2)20x2년도 당기순이익에 미치는 영향은 각각 얼마인가?

Options:
1. ￦206,520 감소, ￦213,200 증가
2. ￦206,520 감소, ￦231,400 증가
3. ￦186,520 감소, ￦213,200 증가
4. ￦186,520 감소, ￦231,400 증가
5. ￦186,520 감소, ￦121,200 증가

Provide your response in the following JSON format:
{
  "selected_answer": "1",  // The number (1-5) of your chosen option
  "reasoning": [
    "1. Analysis for why option 1 is correct/incorrect",
    "2. Analysis for why option 2 is correct/incorrect",
    "3. Analysis for why option 3 is correct/incorrect",
    "4. Analysis for why option 4 is correct/incorrect",
    "5. Analysis for why option 5 is correct/incorrect"
  ]
}
2025-01-03 21:38:28,903 - openai - DEBUG - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
2025-01-03 21:38:28,903 - openai - DEBUG - api_version=None data='{"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are an AI that answers multiple-choice questions with explanations for each option. \\n    When analyzing questions with tables or data, carefully consider all the information provided."}, {"role": "user", "content": "Please analyze the following multiple choice question and provide your answer with reasoning.\\n\\nQuestion: \\u321c\\ub300\\ud55c\\uc740 \\u321c\\ubbfc\\uad6d\\uc774 20x1\\ub144 1\\uc6d4 1\\uc77c\\uc5d0 \\ubc1c\\ud589\\ud55c \\uc0ac\\ucc44\\ub97c \\ubc1c\\ud589\\uc77c\\uc5d0 \\ucde8\\ub4dd\\ud558\\uc600\\uc73c\\uba70, \\ucde8\\ub4dd \\uc2dc \\ub3d9 \\uc0ac\\ucc44\\ub97c \\uae30\\ud0c0\\ud3ec\\uad04\\uc190\\uc775-\\uacf5\\uc815\\uac00\\uce58 \\uce21\\uc815 \\uae08\\uc735\\uc790\\uc0b0(FVOCI \\uae08\\uc735\\uc790\\uc0b0)\\uc73c\\ub85c \\ubd84\\ub958\\ud558\\uc600\\ub2e4. \\u321c\\ub300\\ud55c\\uc758 \\uc0c1\\uae30 \\uae08\\uc735\\uc790\\uc0b0\\uc774 (1)20x1\\ub144\\ub3c4 \\ucd1d\\ud3ec\\uad04\\uc774\\uc775\\uc5d0 \\ubbf8\\uce58\\ub294 \\uc601\\ud5a5\\uacfc (2)20x2\\ub144\\ub3c4 \\ub2f9\\uae30\\uc21c\\uc774\\uc775\\uc5d0 \\ubbf8\\uce58\\ub294 \\uc601\\ud5a5\\uc740 \\uac01\\uac01 \\uc5bc\\ub9c8\\uc778\\uac00?\\n\\nOptions:\\n1. \\uffe6206,520 \\uac10\\uc18c, \\uffe6213,200 \\uc99d\\uac00\\n2. \\uffe6206,520 \\uac10\\uc18c, \\uffe6231,400 \\uc99d\\uac00\\n3. \\uffe6186,520 \\uac10\\uc18c, \\uffe6213,200 \\uc99d\\uac00\\n4. \\uffe6186,520 \\uac10\\uc18c, \\uffe6231,400 \\uc99d\\uac00\\n5. \\uffe6186,520 \\uac10\\uc18c, \\uffe6121,200 \\uc99d\\uac00\\n\\nProvide your response in the following JSON format:\\n{\\n  \\"selected_answer\\": \\"1\\",  // The number (1-5) of your chosen option\\n  \\"reasoning\\": [\\n    \\"1. Analysis for why option 1 is correct/incorrect\\",\\n    \\"2. Analysis for why option 2 is correct/incorrect\\",\\n    \\"3. Analysis for why option 3 is correct/incorrect\\",\\n    \\"4. Analysis for why option 4 is correct/incorrect\\",\\n    \\"5. Analysis for why option 5 is correct/incorrect\\"\\n  ]\\n}"}], "temperature": 0.2, "max_tokens": 500}' message='Post details'
2025-01-03 21:38:34,765 - urllib3.connectionpool - DEBUG - https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
2025-01-03 21:38:34,767 - openai - DEBUG - message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5501 request_id=req_e6fff188ddb7740eef92f137d6fe8ff7 response_code=200
2025-01-03 21:38:34,768 - src.openai_client - INFO - OpenAI API call successful
2025-01-03 21:38:34,768 - src.openai_client - DEBUG - Raw GPT response:
{
  "selected_answer": "2",
  "reasoning": [
    "1. Option 1 states a decrease of ￦206,520 in total comprehensive income and an increase of ￦213,200 in net income for 20x2. The decrease in total comprehensive income seems too high for a FVOCI financial asset, which typically reflects changes in fair value in other comprehensive income, not directly impacting net income.",
    "2. Option 2 states a decrease of ￦206,520 in total comprehensive income and an increase of ￦231,400 in net income for 20x2. The decrease in total comprehensive income aligns with the expected impact of fair value changes on FVOCI assets, and the increase in net income could reflect interest income or gains realized from the asset, making this option plausible.",
    "3. Option 3 indicates a decrease of ￦186,520 in total comprehensive income and an increase of ￦213,200 in net income for 20x2. The decrease in total comprehensive income is lower than expected for a FVOCI asset, which typically would not be this low, making this option less likely.",
    "4. Option 4 shows a decrease of ￦186,520 in total comprehensive income and an increase of ￦231,400 in net income for 20x2. Similar to option 3, the decrease in total comprehensive income is lower than expected for FVOCI assets, making this option less likely.",
    "5. Option 5 states a decrease of ￦186,520 in total comprehensive income and an increase of ￦121,200 in net income for 20x2. The decrease in total comprehensive income is again lower than expected, and the increase in net income seems too low for a financial asset that typically generates higher returns, making this option the least likely."
  ]
}
2025-01-03 21:38:34,768 - src.openai_client - DEBUG - Raw response content:
{
  "selected_answer": "2",
  "reasoning": [
    "1. Option 1 states a decrease of ￦206,520 in total comprehensive income and an increase of ￦213,200 in net income for 20x2. The decrease in total comprehensive income seems too high for a FVOCI financial asset, which typically reflects changes in fair value in other comprehensive income, not directly impacting net income.",
    "2. Option 2 states a decrease of ￦206,520 in total comprehensive income and an increase of ￦231,400 in net income for 20x2. The decrease in total comprehensive income aligns with the expected impact of fair value changes on FVOCI assets, and the increase in net income could reflect interest income or gains realized from the asset, making this option plausible.",
    "3. Option 3 indicates a decrease of ￦186,520 in total comprehensive income and an increase of ￦213,200 in net income for 20x2. The decrease in total comprehensive income is lower than expected for a FVOCI asset, which typically would not be this low, making this option less likely.",
    "4. Option 4 shows a decrease of ￦186,520 in total comprehensive income and an increase of ￦231,400 in net income for 20x2. Similar to option 3, the decrease in total comprehensive income is lower than expected for FVOCI assets, making this option less likely.",
    "5. Option 5 states a decrease of ￦186,520 in total comprehensive income and an increase of ￦121,200 in net income for 20x2. The decrease in total comprehensive income is again lower than expected, and the increase in net income seems too low for a financial asset that typically generates higher returns, making this option the least likely."
  ]
}
2025-01-03 21:38:34,769 - src.openai_client - DEBUG - Parsed GPT response:
{'selected_answer': '2', 'reasoning': ['1. Option 1 states a decrease of ￦206,520 in total comprehensive income and an increase of ￦213,200 in net income for 20x2. The decrease in total comprehensive income seems too high for a FVOCI financial asset, which typically reflects changes in fair value in other comprehensive income, not directly impacting net income.', '2. Option 2 states a decrease of ￦206,520 in total comprehensive income and an increase of ￦231,400 in net income for 20x2. The decrease in total comprehensive income aligns with the expected impact of fair value changes on FVOCI assets, and the increase in net income could reflect interest income or gains realized from the asset, making this option plausible.', '3. Option 3 indicates a decrease of ￦186,520 in total comprehensive income and an increase of ￦213,200 in net income for 20x2. The decrease in total comprehensive income is lower than expected for a FVOCI asset, which typically would not be this low, making this option less likely.', '4. Option 4 shows a decrease of ￦186,520 in total comprehensive income and an increase of ￦231,400 in net income for 20x2. Similar to option 3, the decrease in total comprehensive income is lower than expected for FVOCI assets, making this option less likely.', '5. Option 5 states a decrease of ￦186,520 in total comprehensive income and an increase of ￦121,200 in net income for 20x2. The decrease in total comprehensive income is again lower than expected, and the increase in net income seems too low for a financial asset that typically generates higher returns, making this option the least likely.']}
2025-01-03 21:38:34,769 - src.openai_client - INFO - GPT response successfully parsed
2025-01-03 21:38:34,769 - src.processor - INFO - Question 'Q10' processed: Correct=True, Time=5.87s
2025-01-03 21:38:34,773 - src.processor - INFO - Debug information saved to output/debug/2023_1형_debug.json
2025-01-03 21:38:34,773 - src.processor - INFO - Completed processing of exam '2023_1형' with 7 results
2025-01-03 21:38:34,773 - src.processor - INFO - Exam duration: 82.26s, Accuracy: 30.00%
2025-01-03 21:38:34,773 - src.visualizer - INFO - Generating exam summary
2025-01-03 21:38:34,783 - src.visualizer - INFO - Exam summary saved to output/exam_summary.csv
2025-01-03 21:38:34,784 - src.visualizer - INFO - Generating timing visualizations
2025-01-03 21:38:34,796 - matplotlib.pyplot - DEBUG - Loaded backend macosx version unknown.
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: Matching AppleGothic:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,925 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e9a9a2d18358033875835a6228cb70ce84b7e47c.asset/AssetData/YuMincho.ttc', name='YuMincho', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/a3f9a9e35bdf3babe03b2fd162051306fad439d6.asset/AssetData/Osaka.ttf', name='Osaka', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,926 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/eb257c12d1a51c8c661b89f30eec56cacf9b8987.asset/AssetData/STHEITI.ttf', name='STHeiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/54ef167d6c8e99a69a0d41ce252cc5995ba47580.asset/AssetData/YuGothic-Medium.otf', name='YuGothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/9fdda46cbe802833590494a09b2787378340c597.asset/AssetData/Hanzipen.ttc', name='HanziPen SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/18189590ed3a5f46cef20ed4d1cec2611dca13ff.asset/AssetData/WawaSC-Regular.otf', name='Wawati SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/6f4c91728bb824d6960725ec479c355eab7eeba8.asset/AssetData/NanumScript.ttc', name='Nanum Brush Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/8739f5cf483d3b2f04cbb451d310b68f0cf880d0.asset/AssetData/ToppanBunkyuMinchoPr6N-Regular.otf', name='Toppan Bunkyu Mincho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,927 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f879347736afb6e4e0880bcede9df92492c0f040.asset/AssetData/Gungseouche.ttf', name='GungSeo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/de97612eef4e3cf8ee8e5c0ebd6fd879bbecd23a.asset/AssetData/AppleLiGothic-Medium.ttf', name='Apple LiGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/c2cf5e684236b5395fd48d6ccf0e3b3191ce83a0.asset/AssetData/PCmyoungjo.ttf', name='PCMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/8dc7805506cc9f233dcc19aabf593196842a47ae.asset/AssetData/Hannotate.ttc', name='Hannotate SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5f2614e7b55639e709d8578e16b324b3eb6eb065.asset/AssetData/BMHannaPro-Regular.otf', name='BM Hanna Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/d7d512f49387f96799ae9271c7fa8f8e9fef05d1.asset/AssetData/BIZ_UDGothic.ttc', name='BIZ UDGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,928 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e28431125242b9a298de3296370abdab4a7e8666.asset/AssetData/YuppyTC-Regular.otf', name='Yuppy TC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/7278ac2566252649b05c5a2b07c7d45be59f47c5.asset/AssetData/Libian.ttc', name='Libian SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/42062e40d643fdb5bb3fba917212352fb0690de0.asset/AssetData/YuGothic-Bold.otf', name='YuGothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/aa99d0b2bad7f797f38b49d46cde28fd4b58876e.asset/AssetData/Xingkai.ttc', name='Xingkai SC', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/3d7c99b85a518ffb479044c11185e47744b6448d.asset/AssetData/WawaTC-Regular.otf', name='Wawati TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/32d11e548996658757774d88f9220993653017ea.asset/AssetData/Hiragino_Sans_CNS.ttc', name='Hiragino Sans CNS', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,929 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/62032b9b64a0e3a9121c50aeb2ed794e3e2c201f.asset/AssetData/Hei.ttf', name='Hei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/96af7ec9e88d5dae450d3162213f92a7b1129430.asset/AssetData/YuppySC-Regular.otf', name='Yuppy SC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f7f6b250e97c182e68ac53a2b359ec44548878b9.asset/AssetData/Lantinghei.ttc', name='Lantinghei SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/857d6c90171c328a4892c1492291d34e401d7f25.asset/AssetData/SimSong.ttc', name='SimSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/cd59971ded42add9070aa2172265ba7fcf8d9327.asset/AssetData/BMKirangHaerang-Regular.otf', name='BM Kirang Haerang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/a8805b853edf89283dec908153a0015bdd1d00f8.asset/AssetData/WeibeiSC-Bold.otf', name='Weibei SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5a3fc034b64879656271c040cab38b65d4ea6548.asset/AssetData/LiSongPro.ttf', name='LiSong Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/938fc4f0524ec9f143f1b39a4e63ff9585298376.asset/AssetData/ToppanBunkyuMidashiGothicStdN-ExtraBold.otf', name='Toppan Bunkyu Midashi Gothic', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/12cc699be28fb04f3e3c4969a0378a87b920b174.asset/AssetData/BMHannaAir-Regular.otf', name='BM Hanna Air', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,930 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e71ea5469e5f2039223f22203ee8b9186524afd3.asset/AssetData/BMDoHyeon-Regular.otf', name='BM Dohyeon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/bad9b4bf17cf1669dde54184ba4431c22dcad27b.asset/AssetData/NanumGothic.ttc', name='Nanum Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/10b097deccb3c6126d986e24b1980031ff7399da.asset/AssetData/TsukushiBMaruGothic.ttc', name='Tsukushi B Round Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/7ca27bc02dd7660f9dacd69df96d24639b96e080.asset/AssetData/Pilgiche.ttf', name='PilGi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f0706a236683628e16427c6569e441423faaaa93.asset/AssetData/STXIHEI.ttf', name='STHeiti', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5b843781be7f58151ada774942a0eaa9ec79bd57.asset/AssetData/Kyokasho.ttc', name='YuKyokasho Yoko', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,931 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/40e56e4eafd8b4db78ffe316f64ac4bedba37b53.asset/AssetData/ToppanBunkyuMidashiMinchoStdN-ExtraBold.otf', name='Toppan Bunkyu Midashi Mincho', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5b2f5f0b003344b2c67ce463e76d2485bb43d054.asset/AssetData/BMJua-Regular.otf', name='BM Jua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/28f00a24ba19995bab7249993e6e35d11011074a.asset/AssetData/Kai.ttf', name='Kai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/0818d874bf1d0e24a1fe62e79f407717792c5ee1.asset/AssetData/OsakaMono.ttf', name='Osaka', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/54a2ad3dac6cac875ad675d7d273dc425010a877.asset/AssetData/Kaiti.ttc', name='Kaiti SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/1821952872c81043711aab6910052b65da8edf2c.asset/AssetData/STFANGSO.ttf', name='STFangsong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,932 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/157acc4d862730d6d5beaa943546f80a71948c7b.asset/AssetData/BMHanna11yrs-Regular.otf', name='BM Hanna 11yrs Old', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/9d5450ee93f17da1eacfa01b5e7b598f9e2dda2b.asset/AssetData/Baoli.ttc', name='Baoli SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/b86e58f38fd21e9782e70a104676f1655e72ebab.asset/AssetData/Yuanti.ttc', name='Yuanti SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/b8cf53b3591d6062cd536ba5129454cba899a078.asset/AssetData/LingWaiTC-Medium.otf', name='LingWai TC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/de4b2bad515a67ab2d11e39fd896b1e189252a43.asset/AssetData/HeadlineA.ttf', name='HeadLineA', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,933 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/584ea2a48d14147049c2f9eaee147fe5a1f279ac.asset/AssetData/BiauKai.ttc', name='BiauKaiHK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/9bcdfd464af84ab30592d781f4a82f44f548239c.asset/AssetData/BMYeongSung-Regular.otf', name='BM Yeonsung', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/0ab217c39c45c7c6acaddfa199fd32c55a7b4a19.asset/AssetData/ToppanBunkyuGothicPr6N.ttc', name='Toppan Bunkyu Gothic', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/3a9dbc8ddc8b85f43055a28fb5d551e905d43de2.asset/AssetData/LiHeiPro.ttf', name='LiHei Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/70816a43827731d40efe234b94feba96db91024f.asset/AssetData/NanumMyeongjo.ttc', name='Nanum Myeongjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,934 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f110a45f1759f86c645cfd2f47baba57aa50056e.asset/AssetData/Klee.ttc', name='Klee', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/2ae839cbaa0ff60fe6a1d8921a77c81adcec0646.asset/AssetData/AppleLiSung-Light.ttf', name='Apple LiSung', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/d9a8a6ae726910080d90232eaf0edb06da712758.asset/AssetData/TsukushiAMaruGothic.ttc', name='Tsukushi A Round Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/ad8c3bb76851adc11dc4772c1a7a00caf83e3037.asset/AssetData/Ornanong.ttc', name='PSL Ornanong Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e617c1b15920c6ee2d047ed8724de08521ce5c9a.asset/AssetData/BIZ_UDMincho-regular.ttf', name='BIZ UDMincho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,935 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,936 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,936 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e2c331b942cb338404a160a97a7cd6e8a31428e8.asset/AssetData/LingWaiSC-Medium.otf', name='LingWai SC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,936 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,936 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,936 - matplotlib.font_manager - DEBUG - findfont: Matching AppleGothic:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to AppleGothic ('/System/Library/Fonts/Supplemental/AppleGothic.ttf') with score of 0.050000.
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: Matching AppleGothic:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,965 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/junghyeon/PycharmProjects/FINOVA_AGENT/.venv/lib/python3.12/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e9a9a2d18358033875835a6228cb70ce84b7e47c.asset/AssetData/YuMincho.ttc', name='YuMincho', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/a3f9a9e35bdf3babe03b2fd162051306fad439d6.asset/AssetData/Osaka.ttf', name='Osaka', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,966 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/eb257c12d1a51c8c661b89f30eec56cacf9b8987.asset/AssetData/STHEITI.ttf', name='STHeiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/54ef167d6c8e99a69a0d41ce252cc5995ba47580.asset/AssetData/YuGothic-Medium.otf', name='YuGothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/9fdda46cbe802833590494a09b2787378340c597.asset/AssetData/Hanzipen.ttc', name='HanziPen SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/18189590ed3a5f46cef20ed4d1cec2611dca13ff.asset/AssetData/WawaSC-Regular.otf', name='Wawati SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/6f4c91728bb824d6960725ec479c355eab7eeba8.asset/AssetData/NanumScript.ttc', name='Nanum Brush Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/8739f5cf483d3b2f04cbb451d310b68f0cf880d0.asset/AssetData/ToppanBunkyuMinchoPr6N-Regular.otf', name='Toppan Bunkyu Mincho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f879347736afb6e4e0880bcede9df92492c0f040.asset/AssetData/Gungseouche.ttf', name='GungSeo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,967 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/de97612eef4e3cf8ee8e5c0ebd6fd879bbecd23a.asset/AssetData/AppleLiGothic-Medium.ttf', name='Apple LiGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/c2cf5e684236b5395fd48d6ccf0e3b3191ce83a0.asset/AssetData/PCmyoungjo.ttf', name='PCMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/8dc7805506cc9f233dcc19aabf593196842a47ae.asset/AssetData/Hannotate.ttc', name='Hannotate SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5f2614e7b55639e709d8578e16b324b3eb6eb065.asset/AssetData/BMHannaPro-Regular.otf', name='BM Hanna Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/d7d512f49387f96799ae9271c7fa8f8e9fef05d1.asset/AssetData/BIZ_UDGothic.ttc', name='BIZ UDGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,968 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e28431125242b9a298de3296370abdab4a7e8666.asset/AssetData/YuppyTC-Regular.otf', name='Yuppy TC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/7278ac2566252649b05c5a2b07c7d45be59f47c5.asset/AssetData/Libian.ttc', name='Libian SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/42062e40d643fdb5bb3fba917212352fb0690de0.asset/AssetData/YuGothic-Bold.otf', name='YuGothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/aa99d0b2bad7f797f38b49d46cde28fd4b58876e.asset/AssetData/Xingkai.ttc', name='Xingkai SC', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/3d7c99b85a518ffb479044c11185e47744b6448d.asset/AssetData/WawaTC-Regular.otf', name='Wawati TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/32d11e548996658757774d88f9220993653017ea.asset/AssetData/Hiragino_Sans_CNS.ttc', name='Hiragino Sans CNS', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,969 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/62032b9b64a0e3a9121c50aeb2ed794e3e2c201f.asset/AssetData/Hei.ttf', name='Hei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/96af7ec9e88d5dae450d3162213f92a7b1129430.asset/AssetData/YuppySC-Regular.otf', name='Yuppy SC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f7f6b250e97c182e68ac53a2b359ec44548878b9.asset/AssetData/Lantinghei.ttc', name='Lantinghei SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/857d6c90171c328a4892c1492291d34e401d7f25.asset/AssetData/SimSong.ttc', name='SimSong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/cd59971ded42add9070aa2172265ba7fcf8d9327.asset/AssetData/BMKirangHaerang-Regular.otf', name='BM Kirang Haerang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/a8805b853edf89283dec908153a0015bdd1d00f8.asset/AssetData/WeibeiSC-Bold.otf', name='Weibei SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5a3fc034b64879656271c040cab38b65d4ea6548.asset/AssetData/LiSongPro.ttf', name='LiSong Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/938fc4f0524ec9f143f1b39a4e63ff9585298376.asset/AssetData/ToppanBunkyuMidashiGothicStdN-ExtraBold.otf', name='Toppan Bunkyu Midashi Gothic', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/12cc699be28fb04f3e3c4969a0378a87b920b174.asset/AssetData/BMHannaAir-Regular.otf', name='BM Hanna Air', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,970 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e71ea5469e5f2039223f22203ee8b9186524afd3.asset/AssetData/BMDoHyeon-Regular.otf', name='BM Dohyeon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/bad9b4bf17cf1669dde54184ba4431c22dcad27b.asset/AssetData/NanumGothic.ttc', name='Nanum Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/10b097deccb3c6126d986e24b1980031ff7399da.asset/AssetData/TsukushiBMaruGothic.ttc', name='Tsukushi B Round Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/7ca27bc02dd7660f9dacd69df96d24639b96e080.asset/AssetData/Pilgiche.ttf', name='PilGi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f0706a236683628e16427c6569e441423faaaa93.asset/AssetData/STXIHEI.ttf', name='STHeiti', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5b843781be7f58151ada774942a0eaa9ec79bd57.asset/AssetData/Kyokasho.ttc', name='YuKyokasho Yoko', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,971 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/40e56e4eafd8b4db78ffe316f64ac4bedba37b53.asset/AssetData/ToppanBunkyuMidashiMinchoStdN-ExtraBold.otf', name='Toppan Bunkyu Midashi Mincho', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/5b2f5f0b003344b2c67ce463e76d2485bb43d054.asset/AssetData/BMJua-Regular.otf', name='BM Jua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/28f00a24ba19995bab7249993e6e35d11011074a.asset/AssetData/Kai.ttf', name='Kai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/0818d874bf1d0e24a1fe62e79f407717792c5ee1.asset/AssetData/OsakaMono.ttf', name='Osaka', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/54a2ad3dac6cac875ad675d7d273dc425010a877.asset/AssetData/Kaiti.ttc', name='Kaiti SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/1821952872c81043711aab6910052b65da8edf2c.asset/AssetData/STFANGSO.ttf', name='STFangsong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,972 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/157acc4d862730d6d5beaa943546f80a71948c7b.asset/AssetData/BMHanna11yrs-Regular.otf', name='BM Hanna 11yrs Old', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/9d5450ee93f17da1eacfa01b5e7b598f9e2dda2b.asset/AssetData/Baoli.ttc', name='Baoli SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/b86e58f38fd21e9782e70a104676f1655e72ebab.asset/AssetData/Yuanti.ttc', name='Yuanti SC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/b8cf53b3591d6062cd536ba5129454cba899a078.asset/AssetData/LingWaiTC-Medium.otf', name='LingWai TC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/de4b2bad515a67ab2d11e39fd896b1e189252a43.asset/AssetData/HeadlineA.ttf', name='HeadLineA', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,973 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/584ea2a48d14147049c2f9eaee147fe5a1f279ac.asset/AssetData/BiauKai.ttc', name='BiauKaiHK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/9bcdfd464af84ab30592d781f4a82f44f548239c.asset/AssetData/BMYeongSung-Regular.otf', name='BM Yeonsung', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/0ab217c39c45c7c6acaddfa199fd32c55a7b4a19.asset/AssetData/ToppanBunkyuGothicPr6N.ttc', name='Toppan Bunkyu Gothic', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/3a9dbc8ddc8b85f43055a28fb5d551e905d43de2.asset/AssetData/LiHeiPro.ttf', name='LiHei Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/70816a43827731d40efe234b94feba96db91024f.asset/AssetData/NanumMyeongjo.ttc', name='Nanum Myeongjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,974 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/f110a45f1759f86c645cfd2f47baba57aa50056e.asset/AssetData/Klee.ttc', name='Klee', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/2ae839cbaa0ff60fe6a1d8921a77c81adcec0646.asset/AssetData/AppleLiSung-Light.ttf', name='Apple LiSung', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/d9a8a6ae726910080d90232eaf0edb06da712758.asset/AssetData/TsukushiAMaruGothic.ttc', name='Tsukushi A Round Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/ad8c3bb76851adc11dc4772c1a7a00caf83e3037.asset/AssetData/Ornanong.ttc', name='PSL Ornanong Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e617c1b15920c6ee2d047ed8724de08521ce5c9a.asset/AssetData/BIZ_UDMincho-regular.ttf', name='BIZ UDMincho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,975 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,976 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,976 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/AssetsV2/com_apple_MobileAsset_Font7/e2c331b942cb338404a160a97a7cd6e8a31428e8.asset/AssetData/LingWaiSC-Medium.otf', name='LingWai SC', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-01-03 21:38:34,976 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-01-03 21:38:34,976 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-01-03 21:38:34,976 - matplotlib.font_manager - DEBUG - findfont: Matching AppleGothic:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to AppleGothic ('/System/Library/Fonts/Supplemental/AppleGothic.ttf') with score of 0.050000.
2025-01-03 21:38:35,079 - matplotlib.colorbar - DEBUG - locator: <matplotlib.ticker.AutoLocator object at 0x109378e30>
2025-01-03 21:38:35,143 - src.visualizer - INFO - Timing visualizations saved to output
2025-01-03 21:38:35,143 - src.visualizer - INFO - Generating score visualizations
2025-01-03 21:38:35,173 - src.visualizer - INFO - Score visualizations completed
2025-01-03 21:38:35,174 - src.visualizer - INFO - Generating corrections table
2025-01-03 21:38:35,175 - src.visualizer - INFO - Corrections table saved at: output/2023_1형_corrections.csv
2025-01-03 21:38:35,175 - __main__ - INFO - Processing complete for exam '2023_1형'
2025-01-03 21:38:35,175 - __main__ - INFO - Accuracy: 30.00%
2025-01-03 21:38:35,175 - __main__ - INFO - Total time: 82.26 seconds
2025-01-03 21:38:35,175 - __main__ - INFO - Output directory: 'output'
2025-01-03 21:38:35,175 - __main__ - INFO - Program completed
